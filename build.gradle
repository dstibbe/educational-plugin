buildscript {
    ext.pycharmSandbox = project.buildDir.absolutePath + File.separator + "pycharm-sandbox"
    ext.studioSandbox = project.buildDir.absolutePath + File.separator + "studio-sandbox"
    ext.kotlinVersion = "1.3.11"
    ext.jacksonVersion = "2.9.5"
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.3.12" apply false
    id "java"
    id "idea"
    id "de.undercouch.download" version "3.4.3"
    id 'net.saliman.properties' version '1.4.6'
}


group = 'org.jetbrains.edu'
def buildNumber = System.getenv("BUILD_NUMBER")
version = "$pluginVersion-${buildNumber == null ? "SNAPSHOT" : buildNumber}"

import de.undercouch.gradle.tasks.download.Download
import org.apache.tools.ant.taskdefs.condition.Os
import groovy.io.FileType

String downloadStudioIfNeededAndGetPath() {
    if (!rootProject.hasProperty("studioVersion")) throw new IllegalStateException("studioVersion is unspecified")
    if (!rootProject.hasProperty("studioBuildVersion")) throw new IllegalStateException("studioBuildVersion is unspecified")
    def osFamily = getOsFamily()
    if (osFamily == null) throw new IllegalStateException("current os family is unsupported")

    def studioZip = file("${rootProject.projectDir}/dependencies/studio-$studioVersion-$studioBuildVersion-${osFamily}.zip")
    if (!studioZip.exists()) {
        download {
            src "http://dl.google.com/dl/android/studio/ide-zips/$studioVersion/android-studio-ide-$studioBuildVersion-${osFamily}.zip"
            dest studioZip
        }
    }

    def studioFolder = file("${rootProject.projectDir}/dependencies/studio-$studioVersion-$studioBuildVersion")
    if (!studioFolder.exists()) {
        copy {
            from zipTree(studioZip)
            into studioFolder
        }
    }
    return studioPath(studioFolder)
}

static String getOsFamily() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) return "windows"
    if (Os.isFamily(Os.FAMILY_MAC)) return "mac"
    if (Os.isFamily(Os.FAMILY_UNIX) && !Os.isFamily(Os.FAMILY_MAC)) return "linux"
    return null
}

static String studioPath(File studioFolder) {
    def osFamily = getOsFamily()
    if (osFamily == null) throw new IllegalStateException("current os family is unsupported")
    if (osFamily == "mac") {
        def candidates = []
        studioFolder.eachFileMatch(FileType.DIRECTORIES, ~/Android Studio.*\.app/) {
            candidates << it
        }
        switch (candidates.size()) {
            case 0: throw new IllegalStateException("Can't find any folder matching `Android Studio*.app` in `$studioFolder`")
            case 1: return "${candidates[0]}/Contents"
            default: throw new IllegalStateException("More than one folder matching `Android Studio*.app` found in `$studioFolder`")
        }
    } else {
        return "$studioFolder/android-studio"
    }
}

void createProperties(CharSequence propFilePath, Map<String, String> properties) {
    def propFile = file("${propFilePath}")
    propFile.getParentFile().mkdirs()
    propFile.createNewFile()
    def props = new Properties()
    props.putAll(properties)
    props.store(propFile.newWriter(), null)
}

task downloadJavaFx(type: Download) {
    overwrite true
    src javafx
    dest "${project.buildDir}/javafx.zip"
}

task prepareJavaFx(type: Copy) {
    def javafxFile = file("${project.buildDir}/javafx.zip")
    onlyIf { javafxFile.exists() }
    from zipTree(javafxFile)
    into file("${project.buildDir}/javafx")
}

prepareJavaFx.dependsOn downloadJavaFx

allprojects {
    apply plugin: "org.jetbrains.intellij"
    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: 'net.saliman.properties'

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
        maven { url 'https://dl.bintray.com/jetbrains/markdown' }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-js-wrappers/' }
    }

    intellij {
        if (environmentName.startsWith("studio")) {
            if (project.hasProperty("androidStudioPath")) {
                localPath androidStudioPath
            } else {
                localPath downloadStudioIfNeededAndGetPath()
            }
        } else {
            if (project.hasProperty("ideaVersion")) {
                version ideaVersion
            } else if (project.hasProperty("ideaPath")) {
                localPath ideaPath
            }
        }
    }

    compileKotlin {
        // see https://youtrack.jetbrains.com/issue/KT-19737
        destinationDir = compileJava.destinationDir
        kotlinOptions {
            jvmTarget = "1.8"
            languageVersion = "1.2"
            apiVersion = "1.2"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            languageVersion = "1.2"
            apiVersion = "1.2"
        }
    }

    dependencies {
        compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        compile group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.1'
        compile 'org.jsoup:jsoup:1.11.2'
        compile("org.jetbrains:markdown:0.1.28") {
            exclude module: 'kotlin-runtime'
            exclude module: 'kotlin-reflect'
            exclude module: 'kotlin-stdlib'
            exclude module: 'kotlin-stdlib-common'
            exclude module: 'kotlin-stdlib-jdk8'
        }
        
        compile(group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion) {
            exclude module: 'snakeyaml'
        }
        //transitive dependency is specified explicitly to avoid conflict with lib bundled since idea 181
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion

        //transitive dependency is specified explicitly because of the issue https://github.com/FasterXML/jackson-dataformats-text/issues/81
        //intellij platform uses affected snakeyaml version inside
        compile group: 'org.yaml', name: 'snakeyaml', version: '1.19'
        compile(group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jacksonVersion) {
            exclude module: 'kotlin-runtime'
            exclude module: 'kotlin-reflect'
            exclude module: 'kotlin-stdlib'
            exclude module: 'kotlin-stdlib-common'
            exclude module: 'kotlin-stdlib-jdk8'
        }

        compile 'com.squareup.retrofit2:retrofit:2.4.0'
        compile 'com.squareup.retrofit2:converter-jackson:2.3.0'
        compile 'com.squareup.retrofit2:converter-gson:2.4.0'

        compileOnly fileTree(dir: "${rootProject.buildDir}/javafx/jre/lib/ext")
        
        compile ('org.jetbrains:kotlin-css-jvm:1.0.0-pre.58-kotlin-1.3.0') {
            exclude module: 'kotlin-runtime'
            exclude module: 'kotlin-reflect'
            exclude module: 'kotlin-stdlib'
            exclude module: 'kotlin-stdlib-common'
            exclude module: 'kotlin-stdlib-jdk8'
        }
    }
}


intellij {
    if (project.hasProperty("customSinceBuild")) {
        patchPluginXml.sinceBuild = customSinceBuild
        patchPluginXml.untilBuild = customUntilBuild
    }
    patchPluginXml.changeNotes file("changes.html").getText()
    patchPluginXml.pluginDescription file("description.html").getText()
    pluginName 'EduTools'
    updateSinceUntilBuild true
    downloadSources false
    plugins 'junit', 'Kotlin', "PythonCore:$pythonPluginVersion", "org.intellij.scala:$scalaPluginVersion", "NodeJS:$nodeJsPluginVersion", "JavaScriptLanguage"
}

task configurePyCharm {
    doLast {
        if (!project.hasProperty("pycharmPath")) {
            throw new InvalidUserDataException("Path to PyCharm installed locally is needed\nDefine \"pycharmPath\" property")
        }
        intellij.sandboxDirectory pycharmSandbox
        intellij.alternativeIdePath pycharmPath
    }
}

task configureAndroidStudio {
    doLast {
        if (project.hasProperty("androidStudioPath")) {
            intellij.alternativeIdePath androidStudioPath
        }
        intellij.sandboxDirectory studioSandbox
    }
}

task copyXmls(type: Copy) {
    def resultingMetaInf = "${sourceSets.main.output.resourcesDir}/META-INF"

    for (def subProject : project.subprojects) {
        from "${subProject.name}/resources/META-INF"
        into resultingMetaInf
        include "*.xml"
    }
}

jar.dependsOn(copyXmls)

task removeIncompatiblePyCharmPlugins(type: Delete) {
    doLast {
        file(pycharmSandbox + File.separator + "plugins" + File.separator + "python-ce").deleteDir()
        file(pycharmSandbox + File.separator + "plugins" + File.separator + "Scala").deleteDir()
    }
}

// we need this so as not to install python and Scala plugins on PyCharm
prepareSandbox.finalizedBy(removeIncompatiblePyCharmPlugins)

subprojects {
    sourceSets {
        main {
            java.srcDirs 'src'
            resources.srcDirs 'resources'
            kotlin.srcDirs 'src'
        }

        test {
            java.srcDirs 'testSrc'
            resources.srcDirs 'testResources'
            kotlin.srcDirs 'testSrc'
        }
    }

    project.tasks.getByPath("runIde").enabled false
    project.tasks.getByPath("prepareSandbox").enabled false
}

sourceSets {
    main {
        resources.srcDirs 'resources'
    }
}

configure(project(':educational-core')) {

    task downloadColorFile(type: Download) {
        overwrite false
        src 'https://raw.githubusercontent.com/ozh/github-colors/master/colors.json'
        dest "${projectDir}/resources/languageColors/colors.json"
    }

    task createStepikProperties() {
        createProperties(
          "${projectDir}/resources/stepik/stepik.properties",
          [
            "clientId" : stepikClientId
          ]
        )
    }
    task createHyperskillProperties() {
        createProperties(
          "${projectDir}/resources/hyperskill/hyperskill-oauth.properties",
          [
            "clientId" : hyperskillClientId
          ]
        )
    }
}

configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin'), project(':Edu-Scala'), project(':Edu-Android'), project(':Edu-JavaScript')]) {
    dependencies {
        compile project(':educational-core')
        testCompile project(':educational-core').sourceSets.test.output
    }
}

configure([project(':educational-core'), project(':Edu-Java')]) {
    intellij.plugins 'junit', 'properties', 'gradle', 'Groovy'
}

configure(project(':Edu-Kotlin')) {
    intellij.plugins 'junit', 'Kotlin', 'properties','gradle', 'Groovy'


    task createTwitterProperties() {
        createProperties(
          "${projectDir}/resources/twitter/kotlin_koans/oauth_twitter.properties",
          [
            "consumerKey" : consumerKey,
            "consumerSecret" : consumerSecret
          ]
        )
    }
    processResources.dependsOn(createTwitterProperties)
}

configure(project(':Edu-Python')) {
    task createCheckiOOAuthProperties() {
        createProperties(
          "${projectDir}/resources/checkio/py-checkio-oauth.properties",
          [
            "pyCheckioClientId" : pyCheckioClientId,
            "pyCheckioClientSecret" : pyCheckioClientSecret
          ]
        )
    }
    processResources.dependsOn(createCheckiOOAuthProperties)

    intellij.plugins "PythonCore:$pythonPluginVersion"
}

configure(project(':Edu-Scala')) {
    intellij.plugins "org.intellij.scala:$scalaPluginVersion", 'junit', 'properties', 'gradle', 'Groovy'
}

configure(project(':Edu-Android')) {
    intellij {
        if (project.hasProperty("androidStudioPath")) {
            localPath androidStudioPath
        } else {
            localPath downloadStudioIfNeededAndGetPath()
        }
        plugins 'junit', 'properties', 'android', 'gradle', 'Groovy', 'IntelliLang', 'smali'
    }
}

configure(project(':Edu-JavaScript')) {
  task createCheckiOOAuthProperties() {
    createProperties(
      "${projectDir}/resources/checkio/js-checkio-oauth.properties",
      [
        "jsCheckioClientId" : jsCheckioClientId,
        "jsCheckioClientSecret" : jsCheckioClientSecret
      ]
    )
  }
  processResources.dependsOn(createCheckiOOAuthProperties)

  intellij.plugins "NodeJS:$nodeJsPluginVersion", "JavaScriptLanguage"
}

runIde.systemProperty("-Didea.is.internal", "true")
runIde.systemProperty("-ea", "")

dependencies {
    compile project(':educational-core'), project(':Edu-Python'), project(':Edu-Kotlin'), project(':Edu-Java'), project(':Edu-Scala'), project(':Edu-Android'), project(':Edu-JavaScript')
}

idea {
    project {
        jdkName = 1.8
        languageLevel = 1.8
        vcs = 'Git'
    }
}

allprojects {
    test {
        if (rootProject.hasProperty("stepikTestClientSecret")) {
            environment 'STEPIK_TEST_CLIENT_SECRET', stepikTestClientSecret
        }

        if (rootProject.hasProperty("stepikTestClientId")) {
            environment 'STEPIK_TEST_CLIENT_ID', stepikTestClientId
        }
        if (project.hasProperty('excludeTests')) {
            exclude project.property('excludeTests')
        }
    }
}
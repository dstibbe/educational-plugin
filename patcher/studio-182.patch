diff --git a/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt b/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt
index b008fcf..38e0487 100644
--- a/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt
+++ b/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt
@@ -44,8 +44,7 @@ class AndroidNewTaskDialog(
 
   override fun createAdditionalFields(builder: LayoutBuilder) {
     val androidVersionsInfo = AndroidVersionsInfo()
-    androidVersionsInfo.loadLocalVersions()
-    androidVersionsInfo.loadRemoteTargetVersions(FormFactor.MOBILE, FormFactor.MOBILE.minOfflineApiLevel) { items ->
+    androidVersionsInfo.loadTargetVersions(FormFactor.MOBILE, FormFactor.MOBILE.minOfflineApiLevel) { items ->
       val maxSdkVersion = items.map { it.minApiLevel }.max() ?: FormFactor.MOBILE.maxOfflineApiLevel
       compileSdkVersion = maxOf(maxSdkVersion, compileSdkVersion)
       comboBox.init(FormFactor.MOBILE, items)
diff --git a/Edu-Java/resources/META-INF/Edu-Java.xml b/Edu-Java/resources/META-INF/Edu-Java.xml
index df4d8c1..a1de788 100644
--- a/Edu-Java/resources/META-INF/Edu-Java.xml
+++ b/Edu-Java/resources/META-INF/Edu-Java.xml
@@ -6,6 +6,7 @@
 
   <extensions defaultExtensionNs="Educational">
     <configurator language="JAVA" implementationClass="com.jetbrains.edu.java.JConfigurator"/>
+    <languageDecorator language="JAVA" implementationClass="com.jetbrains.edu.java.JLanguageDecorator"/>
   </extensions>
 
   <extensions defaultExtensionNs="com.intellij">
diff --git a/Edu-Java/src/com/jetbrains/edu/java/JLanguageDecorator.kt b/Edu-Java/src/com/jetbrains/edu/java/JLanguageDecorator.kt
new file mode 100644
index 0000000..29118be
--- /dev/null
+++ b/Edu-Java/src/com/jetbrains/edu/java/JLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.java
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+open class JLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/clike.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "text/x-java"
+}
diff --git a/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml b/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml
index a9e2bf8..591a12f 100644
--- a/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml
+++ b/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml
@@ -15,6 +15,7 @@
     <twitterPluginConfigurator implementation="com.jetbrains.edu.kotlin.twitter.KtTwitterConfigurator"/>
     <optionsProvider instance="com.jetbrains.edu.kotlin.twitter.KtOptionsProvider"/>
     <coursesProvider implementation="com.jetbrains.edu.kotlin.KtBundledCoursesProvider"/>
+    <languageDecorator implementationClass="com.jetbrains.edu.kotlin.KtLanguageDecorator" language="kotlin"/>
 
     <!-- Coursera -->
     <configurator implementationClass="com.jetbrains.edu.kotlin.coursera.CourseraKtConfigurator" language="kotlin" courseType="Coursera" />
diff --git a/Edu-Kotlin/src/com/jetbrains/edu/kotlin/KtLanguageDecorator.kt b/Edu-Kotlin/src/com/jetbrains/edu/kotlin/KtLanguageDecorator.kt
new file mode 100644
index 0000000..9a842b3
--- /dev/null
+++ b/Edu-Kotlin/src/com/jetbrains/edu/kotlin/KtLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.kotlin
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+class KtLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/clike.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "text/x-java"
+}
diff --git a/Edu-Python/resources/META-INF/Edu-Python.xml b/Edu-Python/resources/META-INF/Edu-Python.xml
index ce9b989..73f99d7 100644
--- a/Edu-Python/resources/META-INF/Edu-Python.xml
+++ b/Edu-Python/resources/META-INF/Edu-Python.xml
@@ -22,6 +22,7 @@
     <configurator implementationClass="com.jetbrains.edu.python.learning.PyConfigurator" language="Python"/>
     <configurator implementationClass="com.jetbrains.edu.python.learning.pycharm.PyConfigurator" language="Python"/>
     <coursesProvider implementation="com.jetbrains.edu.python.learning.PyBundledCoursesProvider"/>
+    <languageDecorator implementationClass="com.jetbrains.edu.python.learning.PyLanguageDecorator" language="Python" />
   </extensions>
 
   <actions>
diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/PyLanguageDecorator.kt b/Edu-Python/src/com/jetbrains/edu/python/learning/PyLanguageDecorator.kt
new file mode 100644
index 0000000..32f9226
--- /dev/null
+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/PyLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.python.learning
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+open class PyLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/python.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "python"
+}
diff --git a/Edu-Scala/resources/META-INF/Edu-Scala.xml b/Edu-Scala/resources/META-INF/Edu-Scala.xml
index 815bd92..a1fdadc 100644
--- a/Edu-Scala/resources/META-INF/Edu-Scala.xml
+++ b/Edu-Scala/resources/META-INF/Edu-Scala.xml
@@ -5,6 +5,7 @@
 
   <extensions defaultExtensionNs="Educational">
     <configurator language="Scala" implementationClass="com.jetbrains.edu.scala.ScalaConfigurator"/>
+    <languageDecorator language="Scala" implementationClass="com.jetbrains.edu.scala.ScalaLanguageDecorator"/>
   </extensions>
 
 </idea-plugin>
diff --git a/Edu-Scala/src/com/jetbrains/edu/scala/ScalaLanguageDecorator.kt b/Edu-Scala/src/com/jetbrains/edu/scala/ScalaLanguageDecorator.kt
new file mode 100644
index 0000000..ddcf558
--- /dev/null
+++ b/Edu-Scala/src/com/jetbrains/edu/scala/ScalaLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.scala
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+class ScalaLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/clike.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "text/x-scala"
+}
diff --git a/build.gradle b/build.gradle
index 65627a7..b41fe34 100644
--- a/build.gradle
+++ b/build.gradle
@@ -209,7 +209,7 @@ intellij {
     pluginName 'EduTools'
     updateSinceUntilBuild true
     downloadSources false
-    plugins 'junit', 'Kotlin', "PythonCore:$pythonPluginVersion", "org.intellij.scala:$scalaPluginVersion", "NodeJS:$nodeJsPluginVersion", "JavaScriptLanguage"
+    plugins 'junit', 'Kotlin', "PythonCore:$pythonPluginVersion", "org.intellij.scala:$scalaPluginVersion"
 }
 
 task configurePyCharm {
@@ -304,7 +304,7 @@ configure(project(':educational-core')) {
     }
 }
 
-configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin'), project(':Edu-Scala'), project(':Edu-Android'), project(':Edu-JavaScript')]) {
+configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin'), project(':Edu-Scala'), project(':Edu-Android')]) {
     dependencies {
         compile project(':educational-core')
         testCompile project(':educational-core').sourceSets.test.output
@@ -361,26 +361,27 @@ configure(project(':Edu-Android')) {
     }
 }
 
-configure(project(':Edu-JavaScript')) {
-  task createCheckiOOAuthProperties() {
-    createProperties(
-      "${projectDir}/resources/checkio/js-checkio-oauth.properties",
-      [
-        "jsCheckioClientId" : jsCheckioClientId,
-        "jsCheckioClientSecret" : jsCheckioClientSecret
-      ]
-    )
-  }
-  processResources.dependsOn(createCheckiOOAuthProperties)
-
-  intellij.plugins "NodeJS:$nodeJsPluginVersion", "JavaScriptLanguage"
-}
+//no JS support in Android Studio
+//configure(project(':Edu-JavaScript')) {
+//  task createCheckiOOAuthProperties() {
+//    createProperties(
+//      "${projectDir}/resources/checkio/js-checkio-oauth.properties",
+//      [
+//        "jsCheckioClientId" : jsCheckioClientId,
+//        "jsCheckioClientSecret" : jsCheckioClientSecret
+//      ]
+//    )
+//  }
+//  processResources.dependsOn(createCheckiOOAuthProperties)
+//
+//  intellij.plugins "NodeJS:$nodeJsPluginVersion", "JavaScriptLanguage"
+//}
 
 runIde.systemProperty("-Didea.is.internal", "true")
 runIde.systemProperty("-ea", "")
 
 dependencies {
-    compile project(':educational-core'), project(':Edu-Python'), project(':Edu-Kotlin'), project(':Edu-Java'), project(':Edu-Scala'), project(':Edu-Android'), project(':Edu-JavaScript')
+    compile project(':educational-core'), project(':Edu-Python'), project(':Edu-Kotlin'), project(':Edu-Java'), project(':Edu-Scala'), project(':Edu-Android')
 }
 
 idea {
diff --git a/educational-core/resources/style/template.html.ft b/educational-core/resources/style/template.html.ft
index dc5b095..2a6dfa3 100644
--- a/educational-core/resources/style/template.html.ft
+++ b/educational-core/resources/style/template.html.ft
@@ -7,6 +7,12 @@
   <script type="text/javascript" src="${jquery}"></script>
   <script type="text/javascript" src="${toggle_hint_script}"></script>
   <script type="text/x-mathjax-config" src="${mathjax_script}"></script>
+  <script src="${codemirror}"></script>
+  <script src="${colorize}"></script>
+  <script src="${runmode}"></script>
+  <script src="${javascript}"></script>
+  <script src="${language_script}"></script>
+  <link rel="stylesheet" type="text/css" href="${css_codemirror}"></link>
 
   <link rel="stylesheet" type="text/css" href="${hint_base}"></link>
   <link rel="stylesheet" type="text/css" href="${hint_laf_specific}"></link>
@@ -21,5 +27,6 @@
     ${content}
 </div>
 
+<script>${highlight_code}</script>
 </body>
 </html>
\ No newline at end of file
diff --git a/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java b/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java
index df00d84..2d85601 100644
--- a/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java
+++ b/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java
@@ -2,6 +2,7 @@ package com.jetbrains.edu.learning;
 
 import com.intellij.lang.LanguageExtension;
 import com.intellij.ui.JBColor;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public interface EduLanguageDecorator {
@@ -10,6 +11,27 @@ public interface EduLanguageDecorator {
   LanguageExtension<EduLanguageDecorator> INSTANCE = new LanguageExtension<>(EP_NAME);
 
   /**
+   * Used for code highlighting in Task Description tool window.
+   * Scripts for different languages can be found <a href="https://codemirror.net">here</a>.
+   *
+   * For example, <a href="https://github.com/JetBrains/educational-plugins/tree/master/Edu-Python/resources/python.js">highlighting script</a> for python language.
+   */
+  @NotNull
+  default String getLanguageScriptUrl() {
+    return "";
+  }
+
+  /**
+   * Used for code highlighting in Task Description tool window
+   *
+   * @return parameter for CodeMirror script. Available languages: @see <@linktourl http://codemirror.net/mode/>
+   */
+  @NotNull
+  default String getDefaultHighlightingMode() {
+    return "";
+  }
+
+  /**
    * Gets tag color for decorator language.
    *
    * If it returns null then color for language will be taken
diff --git a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/EduCodeHighlighter.kt b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/EduCodeHighlighter.kt
deleted file mode 100644
index b2d6605..0000000
--- a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/EduCodeHighlighter.kt
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.jetbrains.edu.learning.ui.taskDescription
-
-import com.intellij.codeEditor.printing.HTMLTextPainter
-import com.intellij.lang.Language
-import com.intellij.openapi.project.Project
-import com.intellij.psi.PsiFileFactory
-import org.jsoup.Jsoup
-import org.jsoup.nodes.Element
-import org.jsoup.nodes.TextNode
-
-class EduCodeHighlighter {
-
-  companion object {
-    @JvmStatic
-    fun highlightCodeFragments(project: Project, html: String, defaultLanguage: Language): String {
-      val document = Jsoup.parse(html)
-
-      val codeElements = document.select("code")
-
-      for (codeElement in codeElements) {
-        val textNode = codeElement.childNodes().singleOrNull() as? TextNode ?: continue
-        val text = textNode.wholeText
-        val language = codeElement.language() ?: defaultLanguage
-
-        val psiFile = PsiFileFactory.getInstance(project).createFileFromText(language, "")
-        if (psiFile == null) return html
-
-        val codeText = HTMLTextPainter.convertCodeFragmentToHTMLFragmentWithInlineStyles(psiFile, text)
-
-        val parent = codeElement.parent()
-        // We have to check `parent.parent()` for null
-        // because in case of incomplete code `parent.parent()` can be null
-        // and in this case `parent.after(codeText)` throws `IllegalArgumentException`
-        if (parent.tagName() == "pre" && parent.parent() != null) {
-          parent.after(codeText)
-          parent.remove()
-        } else {
-          val inlineCodeText = codeText.trim().removeSurrounding("<pre>", "</pre>")
-          codeElement.after(inlineCodeText)
-          codeElement.remove()
-        }
-      }
-
-      return document.toString()
-    }
-
-    private fun Element.language(): Language? {
-      val lang = when {
-        hasAttr("data-lang") -> attr("data-lang").removePrefix("text/x-")
-        attr("class").startsWith("language-") -> attr("class").removePrefix("language-")
-        else -> return null
-      }
-      if (lang.isEmpty()) return null
-
-      return Language.getRegisteredLanguages().find { it.id.toLowerCase() == lang }
-    }
-  }
-}
diff --git a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java
index 64500f1..bf276d7 100644
--- a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java
+++ b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java
@@ -80,7 +80,7 @@ public abstract class TaskDescriptionToolWindow {
     if (task != null) {
       String taskText = EduUtils.getTaskTextFromTask(task.getTaskDir(project), task);
       if (taskText != null) {
-        return EduCodeHighlighter.highlightCodeFragments(project, taskText, task.getCourse().getLanguageById());
+        return taskText;
       }
     }
     return EMPTY_TASK_TEXT;
diff --git a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt
index f317331..f2f6409 100644
--- a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt
@@ -2,22 +2,33 @@ package com.jetbrains.edu.learning.ui.taskDescription.styleManagers
 
 import com.intellij.openapi.project.Project
 import com.jetbrains.edu.learning.EduLanguageDecorator
-import com.intellij.util.ui.UIUtil
 import com.jetbrains.edu.learning.EduSettings
+import com.jetbrains.edu.learning.StudyTaskManager
 import com.jetbrains.edu.learning.ui.taskDescription.loadText
 import kotlinx.css.*
 import kotlinx.css.properties.lh
 
 internal class StyleResourcesManager(project: Project, taskText: String) {
+  private fun decorator(project: Project): EduLanguageDecorator? {
+    val language = StudyTaskManager.getInstance(project).course?.languageById
+    return language?.let { EduLanguageDecorator.INSTANCE.forLanguage(language) }
+  }
 
   // update style/template.html.ft in case of changing key names
   val resources = mapOf(
     "typography_color_style" to typographyAndColorStylesheet(),
+    "language_script" to (decorator(project)?.languageScriptUrl ?: ""),
     "content" to taskText,
+    "highlight_code" to highlightScript(project),
     "base_css" to loadText("/style/browser.css"),
+    resourcePair("codemirror", "/code-mirror/codemirror.js"),
     resourcePair("jquery", ("/style/hint/jquery-1.9.1.js")),
+    resourcePair("runmode", "/code-mirror/runmode.js"),
+    resourcePair("colorize", "/code-mirror/colorize.js"),
+    resourcePair("javascript", "/code-mirror/javascript.js"),
     resourcePair("hint_base", "/style/hint/base.css"),
     resourcePair("hint_laf_specific",  "/style/hint/${resourceFileName()}.css"),
+    resourcePair("css_codemirror", "/code-mirror/${resourceFileName()}.css"),
     resourcePair("toggle_hint_script", "/style/hint/toggleHint.js"),
     resourcePair("mathjax_script", "/style/mathjaxConfigure.js"),
     resourcePair("stepik_link", "/style/stepikLink.css")
@@ -55,4 +66,9 @@ internal class StyleResourcesManager(project: Project, taskText: String) {
       }
     }.toString()
   }
+
+  private fun highlightScript(project: Project): String {
+    val loadText = loadText("/code-mirror/highlightCode.js.ft")
+    return loadText?.replace("\${default_mode}", (decorator(project)?.defaultHighlightingMode ?: "")) ?: ""
+  }
 }
\ No newline at end of file
diff --git a/gradle.properties b/gradle.properties
index 6a37f6f..f98a47a 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-environmentName=183
+environmentName=studio-182
 
 # needed for twitting functionality available currently only for kotlin koans
 consumerKey=
diff --git a/resources/META-INF/plugin.xml b/resources/META-INF/plugin.xml
index ae3188c..7d7d4a1 100644
--- a/resources/META-INF/plugin.xml
+++ b/resources/META-INF/plugin.xml
@@ -8,6 +8,7 @@
     <!--update changes in changes.html file instead-->
     <change-notes/>
     <depends>com.intellij.modules.lang</depends>
+    <depends>com.intellij.modules.androidstudio</depends>
 
     <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Scala.xml">org.intellij.scala</depends>
diff --git a/settings.gradle b/settings.gradle
index b120c4d..1d02a34 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,2 @@
 rootProject.name = 'educational-plugin'
-include 'Edu-Java', 'Edu-Scala', 'Edu-Kotlin', 'Edu-Python', 'educational-core', 'Edu-Android', 'Edu-JavaScript'
\ No newline at end of file
+include 'Edu-Java', 'Edu-Scala', 'Edu-Kotlin', 'Edu-Python', 'educational-core', 'Edu-Android'
\ No newline at end of file

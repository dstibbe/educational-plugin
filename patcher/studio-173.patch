diff --git a/Edu-Java/testResources/META-INF/plugin.xml b/Edu-Java/testResources/META-INF/plugin.xml
index c09e7e73d..5278ba576 100644
--- a/Edu-Java/testResources/META-INF/plugin.xml
+++ b/Edu-Java/testResources/META-INF/plugin.xml
@@ -1,5 +1,6 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.java</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Java.xml">com.intellij.modules.java</depends>
 
     <extensions defaultExtensionNs="Educational">
diff --git a/Edu-Kotlin/testResources/META-INF/plugin.xml b/Edu-Kotlin/testResources/META-INF/plugin.xml
index 1f4d26990..c9fb71c71 100644
--- a/Edu-Kotlin/testResources/META-INF/plugin.xml
+++ b/Edu-Kotlin/testResources/META-INF/plugin.xml
@@ -1,5 +1,6 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.kotlin</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Kotlin.xml">com.intellij.modules.java</depends>
 
     <extensions defaultExtensionNs="Educational">
diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java b/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
index 626f6bc01..297f539d5 100644
--- a/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
@@ -81,14 +81,14 @@ public class PyCourseProjectGenerator extends CourseProjectGenerator<PyNewProjec
           final PyPackageManager packageManager = PyPackageManager.getInstance(baseSdk);
           return packageManager.createVirtualEnv(virtualEnvPath, false);
         }
-      }, getAllSdks(), baseSdk, project.getBasePath(), null);
+      }, getAllSdks(), baseSdk, project.getBasePath());
       if (sdk == null) {
         LOG.warn("Failed to create virtual env in " + virtualEnvPath);
         return;
       }
       settings.setSdk(sdk);
       SdkConfigurationUtil.addSdk(sdk);
-      PySdkExtKt.associateWithModule(sdk, null, project.getBasePath());
+      PySdkExtKt.associateWithProject(sdk, project, false);
     }
   }
 
diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt b/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
index c171bcc49..bcef799f6 100644
--- a/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
@@ -17,7 +17,7 @@ internal class PyLanguageSettings : PyLanguageSettings() {
       if (it != null && PythonSdkType.isVirtualEnv(it)) {
         val data = it.sdkAdditionalData as PythonSdkAdditionalData?
         if (data != null) {
-          val path = data.associatedModulePath
+          val path = data.associatedProjectPath
           if (path != null) {
             return@removeIf true
           }
@@ -27,7 +27,7 @@ internal class PyLanguageSettings : PyLanguageSettings() {
     }
 
     val sdks = if (fakeSdk != null) ContainerUtil.prepend(registeredSdks, fakeSdk) else registeredSdks
-    val sdkChooser = PythonSdkChooserCombo(null, null, sdks, null) { true }
+    val sdkChooser = PythonSdkChooserCombo(null, sdks, null) { true }
     sdkChooser.addChangedListener {
       mySettings.sdk = sdkChooser.comboBox.selectedItem as? Sdk
       notifyListeners()
diff --git a/Edu-Python/testResources/META-INF/plugin.xml b/Edu-Python/testResources/META-INF/plugin.xml
index 5c7158398..a20004f8c 100644
--- a/Edu-Python/testResources/META-INF/plugin.xml
+++ b/Edu-Python/testResources/META-INF/plugin.xml
@@ -1,4 +1,5 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.python</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Python.xml">com.intellij.modules.python</depends>
 </idea-plugin>
diff --git a/Edu-Scala/testResources/META-INF/plugin.xml b/Edu-Scala/testResources/META-INF/plugin.xml
index 5eca860a3..edce8141e 100644
--- a/Edu-Scala/testResources/META-INF/plugin.xml
+++ b/Edu-Scala/testResources/META-INF/plugin.xml
@@ -1,4 +1,5 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.scala</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Scala.xml">org.intellij.scala</depends>
 </idea-plugin>
diff --git a/build.gradle b/build.gradle
index 6049767e3..7532dd328 100644
--- a/build.gradle
+++ b/build.gradle
@@ -122,10 +122,10 @@ allprojects {
     }
 
     intellij {
-        if (project.hasProperty("ideaVersion")) {
-            version ideaVersion
-        } else if (project.hasProperty("ideaPath")) {
-            localPath ideaPath
+        if (project.hasProperty("androidStudioPath")) {
+            localPath androidStudioPath
+        } else {
+            localPath downloadStudioIfNeededAndGetPath()
         }
     }
 
@@ -178,10 +178,10 @@ allprojects {
 
 
 intellij {
-    if (project.hasProperty("ideaVersion")) {
-        version ideaVersion
-    } else if (project.hasProperty("ideaPath")) {
-        localPath ideaPath
+    if (project.hasProperty("androidStudioPath")) {
+        localPath androidStudioPath
+    } else {
+        localPath downloadStudioIfNeededAndGetPath()
     }
     if (project.hasProperty("customSinceBuild")) {
         patchPluginXml.sinceBuild = customSinceBuild
@@ -192,7 +192,7 @@ intellij {
     pluginName 'EduTools'
     updateSinceUntilBuild true
     downloadSources false
-    plugins 'junit', 'Kotlin', "PythonCore:$pythonPluginVersion", "org.intellij.scala:$scalaPluginVersion", "NodeJS:$nodeJsPluginVersion", "JavaScriptLanguage"
+    plugins 'junit', 'Kotlin', "PythonCore:$pythonPluginVersion", "org.intellij.scala:$scalaPluginVersion"
 }
 
 task configurePyCharm {
@@ -271,7 +271,7 @@ configure(project(':educational-core')) {
     }
 }
 
-configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin'), project(':Edu-Scala'), project(':Edu-Android'), project(':Edu-JavaScript')]) {
+configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin'), project(':Edu-Scala'), project(':Edu-Android')]) {
     dependencies {
         compile project(':educational-core')
         testCompile project(':educational-core').sourceSets.test.output
@@ -279,11 +279,11 @@ configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin'),
 }
 
 configure([project(':educational-core'), project(':Edu-Java')]) {
-    intellij.plugins 'junit', 'properties', 'gradle', 'Groovy'
+    intellij.plugins 'junit', 'properties', 'gradle', 'Groovy', 'smali'
 }
 
 configure(project(':Edu-Kotlin')) {
-    intellij.plugins 'junit', 'Kotlin', 'properties','gradle', 'Groovy'
+    intellij.plugins 'junit', 'Kotlin', 'properties','gradle', 'Groovy', 'smali'
 
 
     task createTwitterProperties() {
@@ -314,33 +314,18 @@ configure(project(':Edu-Python')) {
 }
 
 configure(project(':Edu-Scala')) {
-    intellij.plugins "org.intellij.scala:$scalaPluginVersion", 'junit', 'properties', 'gradle', 'Groovy'
+    intellij.plugins "org.intellij.scala:$scalaPluginVersion", 'junit', 'properties', 'gradle', 'Groovy', 'smali'
 }
 
 configure(project(':Edu-Android')) {
     intellij.plugins 'junit', 'properties', 'android', 'gradle', 'Groovy', 'IntelliLang', 'smali'
 }
 
-configure(project(':Edu-JavaScript')) {
-  task createCheckiOOAuthProperties() {
-    createProperties(
-      "${projectDir}/resources/checkio/js-checkio-oauth.properties",
-      [
-        "jsCheckioClientId" : jsCheckioClientId,
-        "jsCheckioClientSecret" : jsCheckioClientSecret
-      ]
-    )
-  }
-  processResources.dependsOn(createCheckiOOAuthProperties)
-
-  intellij.plugins "NodeJS:$nodeJsPluginVersion", "JavaScriptLanguage"
-}
-
 runIde.systemProperty("-Didea.is.internal", "true")
 runIde.systemProperty("-ea", "")
 
 dependencies {
-    compile project(':educational-core'), project(':Edu-Python'), project(':Edu-Kotlin'), project(':Edu-Java'), project(':Edu-Scala'), project(':Edu-Android'), project(':Edu-JavaScript')
+    compile project(':educational-core'), project(':Edu-Python'), project(':Edu-Kotlin'), project(':Edu-Java'), project(':Edu-Scala'), project(':Edu-Android')
 }
 
 idea {
diff --git a/educational-core/resources/META-INF/educational-core.xml b/educational-core/resources/META-INF/educational-core.xml
index 224b17b96..236f49fbe 100644
--- a/educational-core/resources/META-INF/educational-core.xml
+++ b/educational-core/resources/META-INF/educational-core.xml
@@ -191,8 +191,7 @@
         implementation="com.jetbrains.edu.learning.handlers.AnswerPlaceholderExtendWordHandler"/>
     <renameHandler implementation="com.jetbrains.edu.learning.handlers.EduRenameHandler"/>
     <refactoring.moveHandler implementation="com.jetbrains.edu.learning.handlers.EduMoveDelegate" order="first"/>
-    <statistics.projectUsagesCollector implementation="com.jetbrains.edu.learning.statistics.EduUsagesCollector"/>
-    <statistics.usagesCollector implementation="com.jetbrains.edu.learning.statistics.LegacyEduUsagesCollector"/>
+    <statistics.usagesCollector implementation="com.jetbrains.edu.learning.statistics.EduUsagesCollector"/>
     <applicationService serviceImplementation="com.jetbrains.edu.learning.statistics.EduUsagesCollector"/>
     <applicationService serviceImplementation="com.jetbrains.edu.learning.EduSettings"/>
     <applicationService serviceImplementation="com.jetbrains.edu.learning.statistics.EduStatistics"/>
diff --git a/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java b/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java
index 6b6a37f48..ca43245db 100644
--- a/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java
+++ b/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java
@@ -11,10 +11,6 @@ import com.intellij.openapi.diagnostic.Logger;
 import com.intellij.openapi.editor.colors.EditorColorsListener;
 import com.intellij.openapi.editor.colors.EditorColorsManager;
 import com.intellij.openapi.editor.colors.EditorColorsScheme;
-import com.intellij.openapi.externalSystem.model.DataNode;
-import com.intellij.openapi.externalSystem.model.project.ProjectData;
-import com.intellij.openapi.externalSystem.service.project.ExternalProjectRefreshCallback;
-import com.intellij.openapi.fileEditor.FileEditorManager;
 import com.intellij.openapi.keymap.Keymap;
 import com.intellij.openapi.keymap.ex.KeymapManagerEx;
 import com.intellij.openapi.module.Module;
@@ -24,7 +20,6 @@ import com.intellij.openapi.startup.StartupManager;
 import com.intellij.openapi.util.Pair;
 import com.intellij.openapi.util.io.FileUtil;
 import com.intellij.openapi.vfs.VfsUtil;
-import com.intellij.openapi.vfs.VirtualFile;
 import com.intellij.openapi.vfs.VirtualFileManager;
 import com.intellij.openapi.wm.StatusBar;
 import com.intellij.openapi.wm.ToolWindowManager;
@@ -37,7 +32,6 @@ import com.jetbrains.edu.learning.actions.NextPlaceholderAction;
 import com.jetbrains.edu.learning.actions.PrevPlaceholderAction;
 import com.jetbrains.edu.learning.courseFormat.Course;
 import com.jetbrains.edu.learning.courseFormat.RemoteCourse;
-import com.jetbrains.edu.learning.courseFormat.tasks.Task;
 import com.jetbrains.edu.learning.handlers.UserCreatedFileListener;
 import com.jetbrains.edu.learning.gradle.generation.EduGradleUtils;
 import com.jetbrains.edu.learning.newproject.CourseProjectGenerator;
@@ -46,7 +40,6 @@ import com.jetbrains.edu.learning.statistics.EduUsagesCollector;
 import com.jetbrains.edu.learning.stepik.*;
 import com.jetbrains.edu.learning.ui.taskDescription.TaskDescriptionToolWindow;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import javax.swing.*;
 import java.io.File;
@@ -129,29 +122,10 @@ public class EduProjectComponent implements ProjectComponent {
       return;
     }
 
-    if (myProject.getUserData(CourseProjectGenerator.EDU_PROJECT_CREATED) == Boolean.TRUE) {
+    // Android Studio imports gradle project itself but not in tests
+    boolean needImportForCurrentPlatform = ApplicationManager.getApplication().isUnitTestMode() || !isAndroidStudio();
+    if (needImportForCurrentPlatform && myProject.getUserData(CourseProjectGenerator.EDU_PROJECT_CREATED) == Boolean.TRUE) {
       EduGradleUtils.importGradleProject(myProject, projectBasePath);
-    } else if (isAndroidStudio()) {
-      // Unexpectedly, Android Studio corrupts content root paths after course project reopening
-      // And project structure can't show project tree because of it.
-      // We don't know better and cleaner way how to fix it than to refresh project.
-      EduGradleUtils.importGradleProject(myProject, projectBasePath, new ExternalProjectRefreshCallback() {
-        @Override
-        public void onSuccess(@Nullable DataNode<ProjectData> externalProject) {
-          // We have to open current opened file in project view manually
-          // because it can't restore previous state.
-          VirtualFile[] files = FileEditorManager.getInstance(myProject).getSelectedFiles();
-          for (VirtualFile file : files) {
-            Task task = getTaskForFile(myProject, file);
-            if (task != null) {
-              ProjectView.getInstance(myProject).select(file, file, false);
-            }
-          }
-        }
-
-        @Override
-        public void onFailure(@NotNull String errorMessage, @Nullable String errorDetails) { }
-      });
     }
 
     // Android Studio creates `gradlew` not via VFS so we have to refresh project dir
diff --git a/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt b/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt
index 7ea0a52e3..148248f38 100644
--- a/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt
@@ -1,14 +1,8 @@
 package com.jetbrains.edu.learning.gradle.generation
 
 import com.intellij.ide.fileTemplates.FileTemplateManager
-import com.intellij.openapi.components.ServiceManager
 import com.intellij.openapi.externalSystem.importing.ImportSpecBuilder
-import com.intellij.openapi.externalSystem.model.DataNode
-import com.intellij.openapi.externalSystem.model.ExternalSystemDataKeys
-import com.intellij.openapi.externalSystem.model.project.ProjectData
 import com.intellij.openapi.externalSystem.service.execution.ProgressExecutionMode
-import com.intellij.openapi.externalSystem.service.project.ExternalProjectRefreshCallback
-import com.intellij.openapi.externalSystem.service.project.ProjectDataManager
 import com.intellij.openapi.externalSystem.util.ExternalSystemApiUtil
 import com.intellij.openapi.externalSystem.util.ExternalSystemUtil
 import com.intellij.openapi.project.Project
@@ -76,34 +70,15 @@ object EduGradleUtils {
         ExternalSystemUtil.ensureToolWindowInitialized(project, GradleConstants.SYSTEM_ID)
     }
 
-    @JvmOverloads
     @JvmStatic
-    fun importGradleProject(project: Project, projectBasePath: String, callback: ExternalProjectRefreshCallback? = null) {
-      val builder = ImportSpecBuilder(project, GradleConstants.SYSTEM_ID)
-        .use(ProgressExecutionMode.IN_BACKGROUND_ASYNC)
-        .dontReportRefreshErrors()
-      if (callback == null) {
-        builder.useDefaultCallback()
-      } else {
-        builder.callback(object : ExternalProjectRefreshCallback {
-          override fun onSuccess(externalProject: DataNode<ProjectData>?) {
-            // We have to import data manually because we use custom callback
-            // but default callback code is private.
-            // See `com.intellij.openapi.externalSystem.importing.ImportSpecBuilder#build`
-            if (externalProject != null) {
-              ServiceManager.getService(ProjectDataManager::class.java).importData(externalProject, project, false)
-            }
-            callback.onSuccess(externalProject)
-          }
-
-          override fun onFailure(errorMessage: String, errorDetails: String?) {
-            callback.onFailure(errorMessage, errorDetails)
-          }
-        })
-      }
-      // Build toolwindow will be opened if `ExternalSystemDataKeys.NEWLY_IMPORTED_PROJECT` is true while sync
-      project.putUserData(ExternalSystemDataKeys.NEWLY_IMPORTED_PROJECT, null)
-      ExternalSystemUtil.refreshProject(projectBasePath, builder.build())
+    fun importGradleProject(project: Project, projectBasePath: String) {
+        ExternalSystemUtil.refreshProject(projectBasePath,
+                                          ImportSpecBuilder(project, GradleConstants.SYSTEM_ID)
+                                            .useDefaultCallback()
+                                            .use(ProgressExecutionMode.IN_BACKGROUND_ASYNC)
+                                            .dontReportRefreshErrors()
+                                            .build(),
+                                          false)
     }
 
     @JvmStatic
diff --git a/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt b/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt
index 6868df389..5895ddad5 100644
--- a/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt
@@ -75,7 +75,7 @@ class CourseViewPane(project: Project) : AbstractProjectViewPSIPane(project) {
 
   override fun createComponent(): JComponent {
     val component = super.createComponent()
-    installComparator(EduNodeComparator)
+    installComparator(treeBuilder, EduNodeComparator)
 
     if (!EduUtils.isStudentProject(myProject)) return component
     val panel = JPanel(BorderLayout())
diff --git a/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java b/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java
index 2dc086372..02af30eb7 100644
--- a/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java
+++ b/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java
@@ -15,18 +15,18 @@
  */
 package com.jetbrains.edu.learning.statistics;
 
+import com.intellij.internal.statistic.UsagesCollector;
+import com.intellij.internal.statistic.beans.GroupDescriptor;
 import com.intellij.internal.statistic.beans.UsageDescriptor;
-import com.intellij.internal.statistic.service.fus.collectors.ProjectUsagesCollector;
 import com.intellij.openapi.components.ServiceManager;
-import com.intellij.openapi.project.Project;
 import com.intellij.util.containers.hash.HashSet;
 import gnu.trove.TObjectIntHashMap;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.Set;
 
-public class EduUsagesCollector extends ProjectUsagesCollector {
-  public static final String GROUP_ID = "statistics.educational";
+public class EduUsagesCollector extends UsagesCollector {
+  private static final String GROUP_ID = "educational";
 
   public static void projectTypeCreated(@NotNull String projectTypeId) {
     advanceKey("project.created." + projectTypeId);
@@ -94,12 +94,7 @@ public class EduUsagesCollector extends ProjectUsagesCollector {
 
   @NotNull
   @Override
-  public Set<UsageDescriptor> getUsages(@NotNull Project project) {
-    return collectUsages();
-  }
-
-  @NotNull
-  static Set<UsageDescriptor> collectUsages() {
+  public Set<UsageDescriptor> getUsages() {
     HashSet<UsageDescriptor> descriptors = new HashSet<>();
     getDescriptors().forEachEntry((key, value) -> {
       descriptors.add(new UsageDescriptor(key, value));
@@ -109,10 +104,11 @@ public class EduUsagesCollector extends ProjectUsagesCollector {
     return descriptors;
   }
 
+
   @NotNull
   @Override
-  public String getGroupId() {
-    return GROUP_ID;
+  public GroupDescriptor getGroupId() {
+    return GroupDescriptor.create(GROUP_ID);
   }
 
   private static void advanceKey(@NotNull String key) {
diff --git a/educational-core/src/com/jetbrains/edu/learning/statistics/LegacyEduUsagesCollector.java b/educational-core/src/com/jetbrains/edu/learning/statistics/LegacyEduUsagesCollector.java
deleted file mode 100644
index b7d765da5..000000000
--- a/educational-core/src/com/jetbrains/edu/learning/statistics/LegacyEduUsagesCollector.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.jetbrains.edu.learning.statistics;
-
-import com.intellij.internal.statistic.UsagesCollector;
-import com.intellij.internal.statistic.beans.GroupDescriptor;
-import com.intellij.internal.statistic.beans.UsageDescriptor;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.Set;
-
-import static com.jetbrains.edu.learning.statistics.EduUsagesCollector.GROUP_ID;
-
-/**
- * To be removed in 2018.2
- * See FrameworkUsageCollector
- */
-@Deprecated
-public class LegacyEduUsagesCollector extends UsagesCollector {
-
-  @NotNull
-  @Override
-  public GroupDescriptor getGroupId() {
-    return GroupDescriptor.create(GROUP_ID);
-  }
-
-  @NotNull
-  @Override
-  public Set<UsageDescriptor> getUsages() {
-    return EduUsagesCollector.collectUsages();
-  }
-}
\ No newline at end of file
diff --git a/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java b/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java
index 0d20b1455..67304d7b6 100644
--- a/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java
+++ b/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java
@@ -353,7 +353,7 @@ public class StepikAdaptiveConnector {
   private static void setToolWindowText(@NotNull Project project, @NotNull Task task) {
     final TaskDescriptionToolWindow window = EduUtils.getStudyToolWindow(project);
     if (window != null) {
-      ApplicationManager.getApplication().invokeLater(() -> window.setCurrentTask(project, task));
+      window.setCurrentTask(project, task);
     }
   }
 
diff --git a/educational-core/src/icons/EducationalCoreIcons.java b/educational-core/src/icons/EducationalCoreIcons.java
index 4b7a5a870..a4af4fe72 100644
--- a/educational-core/src/icons/EducationalCoreIcons.java
+++ b/educational-core/src/icons/EducationalCoreIcons.java
@@ -39,5 +39,5 @@ public class EducationalCoreIcons {
 
   public static final Icon CourseAction = load("/icons/com/jetbrains/edu/eduCourseAction.png"); // 16x16
   public static final Icon CourseTree = load("/icons/com/jetbrains/edu/eduCourseTree.png"); // 16x16
-  public static final Icon CourseToolWindow = load("/icons/com/jetbrains/edu/eduCourseTask.svg"); // 13x13
+  public static final Icon CourseToolWindow = load("/icons/com/jetbrains/edu/eduCourseTask181.png"); // 13x13
 }
diff --git a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt
index 2305cf12c..41ea5bbd0 100644
--- a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt
+++ b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt
@@ -49,6 +49,7 @@ class CourseViewTest : CourseViewTestBase() {
                           "   +TaskNode task2\n" +
                           "   +TaskNode task3\n" +
                           "   +TaskNode task4\n"
+    waitWhileBusy(pane.tree)
     PlatformTestUtil.assertTreeEqual(pane.tree, structure)
   }
 
diff --git a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt
index 0d7201896..28a4b790f 100644
--- a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt
+++ b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt
@@ -1,11 +1,15 @@
 package com.jetbrains.edu.learning.courseView
 
 import com.intellij.ide.projectView.ProjectView
+import com.intellij.ide.util.treeView.AbstractTreeBuilder
 import com.intellij.testFramework.PlatformTestUtil
 import com.intellij.testFramework.ProjectViewTestUtil
+import com.intellij.ui.tree.AsyncTreeModel
+import com.intellij.util.ui.UIUtil
 import com.intellij.util.ui.tree.TreeUtil
 import com.jetbrains.edu.learning.EduActionTestCase
 import com.jetbrains.edu.learning.projectView.CourseViewPane
+import java.util.concurrent.TimeUnit
 import javax.swing.JTree
 
 abstract class CourseViewTestBase : EduActionTestCase() {
@@ -32,6 +36,34 @@ abstract class CourseViewTestBase : EduActionTestCase() {
   }
 
   protected fun waitWhileBusy(tree: JTree) {
-    PlatformTestUtil.waitWhileBusy(tree)
+    val startTimeMillis = System.currentTimeMillis()
+    while (isBusy(tree)) {
+      assertMaxWaitTimeSince(startTimeMillis)
+    }
+  }
+
+  private fun getMillisSince(startTimeMillis: Long): Long {
+    return System.currentTimeMillis() - startTimeMillis
+  }
+
+  private fun assertMaxWaitTimeSince(startTimeMillis: Long) {
+    assert(getMillisSince(startTimeMillis) <= MAX_WAIT_TIME) { "the waiting takes too long" }
+  }
+
+  private fun isBusy(tree: JTree): Boolean {
+    UIUtil.dispatchAllInvocationEvents()
+    val model = tree.model
+    if (model is AsyncTreeModel) {
+      if (model.isProcessing) return true
+      UIUtil.dispatchAllInvocationEvents()
+      return model.isProcessing
+    }
+    val builder = AbstractTreeBuilder.getBuilderFor(tree) ?: return false
+    val ui = builder.ui ?: return false
+    return ui.hasPendingWork()
+  }
+
+  companion object {
+    private val MAX_WAIT_TIME = TimeUnit.MINUTES.toMillis(2)
   }
 }
diff --git a/patcher/studio-173.patch b/patcher/studio-173.patch
index 84000d752..3616b206d 100644
--- a/patcher/studio-173.patch
+++ b/patcher/studio-173.patch
@@ -1,499 +0,0 @@
-diff --git a/Edu-Java/testResources/META-INF/plugin.xml b/Edu-Java/testResources/META-INF/plugin.xml
-index c09e7e7..5278ba5 100644
---- a/Edu-Java/testResources/META-INF/plugin.xml
-+++ b/Edu-Java/testResources/META-INF/plugin.xml
-@@ -1,5 +1,6 @@
- <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
-     <id>com.jetbrains.edu.java</id>
-+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
-     <depends optional="true" config-file="Edu-Java.xml">com.intellij.modules.java</depends>
-
-     <extensions defaultExtensionNs="Educational">
-diff --git a/Edu-Kotlin/testResources/META-INF/plugin.xml b/Edu-Kotlin/testResources/META-INF/plugin.xml
-index 1f4d269..c9fb71c 100644
---- a/Edu-Kotlin/testResources/META-INF/plugin.xml
-+++ b/Edu-Kotlin/testResources/META-INF/plugin.xml
-@@ -1,5 +1,6 @@
- <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
-     <id>com.jetbrains.edu.kotlin</id>
-+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
-     <depends optional="true" config-file="Edu-Kotlin.xml">com.intellij.modules.java</depends>
-
-     <extensions defaultExtensionNs="Educational">
-diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java b/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
-index 5e2f41e..e825027 100644
---- a/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
-+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
-@@ -81,14 +81,14 @@ public class PyCourseProjectGenerator extends CourseProjectGenerator<PyNewProjec
-           final PyPackageManager packageManager = PyPackageManager.getInstance(baseSdk);
-           return packageManager.createVirtualEnv(virtualEnvPath, false);
-         }
--      }, getAllSdks(), baseSdk, project.getBasePath(), null);
-+      }, getAllSdks(), baseSdk, project.getBasePath());
-       if (sdk == null) {
-         LOG.warn("Failed to create virtual env in " + virtualEnvPath);
-         return;
-       }
-       settings.setSdk(sdk);
-       SdkConfigurationUtil.addSdk(sdk);
--      PySdkExtKt.associateWithModule(sdk, null, project.getBasePath());
-+      PySdkExtKt.associateWithProject(sdk, project, false);
-     }
-   }
-
-diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt b/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
-index c171bcc..bcef799 100644
---- a/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
-+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
-@@ -17,7 +17,7 @@ internal class PyLanguageSettings : PyLanguageSettings() {
-       if (it != null && PythonSdkType.isVirtualEnv(it)) {
-         val data = it.sdkAdditionalData as PythonSdkAdditionalData?
-         if (data != null) {
--          val path = data.associatedModulePath
-+          val path = data.associatedProjectPath
-           if (path != null) {
-             return@removeIf true
-           }
-@@ -27,7 +27,7 @@ internal class PyLanguageSettings : PyLanguageSettings() {
-     }
-
-     val sdks = if (fakeSdk != null) ContainerUtil.prepend(registeredSdks, fakeSdk) else registeredSdks
--    val sdkChooser = PythonSdkChooserCombo(null, null, sdks, null) { true }
-+    val sdkChooser = PythonSdkChooserCombo(null, sdks, null) { true }
-     sdkChooser.addChangedListener {
-       mySettings.sdk = sdkChooser.comboBox.selectedItem as? Sdk
-       notifyListeners()
-diff --git a/Edu-Python/testResources/META-INF/plugin.xml b/Edu-Python/testResources/META-INF/plugin.xml
-index 5c71583..a20004f 100644
---- a/Edu-Python/testResources/META-INF/plugin.xml
-+++ b/Edu-Python/testResources/META-INF/plugin.xml
-@@ -1,4 +1,5 @@
- <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
-     <id>com.jetbrains.edu.python</id>
-+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
-     <depends optional="true" config-file="Edu-Python.xml">com.intellij.modules.python</depends>
- </idea-plugin>
-diff --git a/Edu-Scala/testResources/META-INF/plugin.xml b/Edu-Scala/testResources/META-INF/plugin.xml
-index 5eca860..edce814 100644
---- a/Edu-Scala/testResources/META-INF/plugin.xml
-+++ b/Edu-Scala/testResources/META-INF/plugin.xml
-@@ -1,4 +1,5 @@
- <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
-     <id>com.jetbrains.edu.scala</id>
-+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
-     <depends optional="true" config-file="Edu-Scala.xml">org.intellij.scala</depends>
- </idea-plugin>
-diff --git a/build.gradle b/build.gradle
-index 5390f1b..3e14481 100644
---- a/build.gradle
-+++ b/build.gradle
-@@ -112,10 +112,10 @@ allprojects {
-     }
-
-     intellij {
--        if (project.hasProperty("ideaVersion")) {
--            version ideaVersion
--        } else if (project.hasProperty("ideaPath")) {
--            localPath ideaPath
-+        if (project.hasProperty("androidStudioPath")) {
-+            localPath androidStudioPath
-+        } else {
-+            localPath downloadStudioIfNeededAndGetPath()
-         }
-     }
-
-@@ -164,10 +164,10 @@ allprojects {
-
-
- intellij {
--    if (project.hasProperty("ideaVersion")) {
--        version ideaVersion
--    } else if (project.hasProperty("ideaPath")) {
--        localPath ideaPath
-+    if (project.hasProperty("androidStudioPath")) {
-+        localPath androidStudioPath
-+    } else {
-+        localPath downloadStudioIfNeededAndGetPath()
-     }
-     if (project.hasProperty("customSinceBuild")) {
-         patchPluginXml.sinceBuild = customSinceBuild
-@@ -265,11 +265,11 @@ configure([project(':Edu-Python'), project(':Edu-Java'), project(':Edu-Kotlin'),
- }
-
- configure([project(':educational-core'), project(':Edu-Java')]) {
--    intellij.plugins 'junit', 'properties', 'gradle', 'Groovy'
-+    intellij.plugins 'junit', 'properties', 'gradle', 'Groovy', 'smali'
- }
-
- configure(project(':Edu-Kotlin')) {
--    intellij.plugins 'junit', 'Kotlin', 'properties','gradle', 'Groovy'
-+    intellij.plugins 'junit', 'Kotlin', 'properties','gradle', 'Groovy', 'smali'
-
-
-     task createTwitterProperties() {
-@@ -287,7 +287,7 @@ configure(project(':Edu-Python')) {
- }
-
- configure(project(':Edu-Scala')) {
--    intellij.plugins "org.intellij.scala:$scalaPluginVersion", 'junit', 'properties', 'gradle', 'Groovy'
-+    intellij.plugins "org.intellij.scala:$scalaPluginVersion", 'junit', 'properties', 'gradle', 'Groovy', 'smali'
- }
-
- configure(project(':Edu-Android')) {
-diff --git a/educational-core/resources/META-INF/educational-core.xml b/educational-core/resources/META-INF/educational-core.xml
-index 2e3c562..1d400de 100644
---- a/educational-core/resources/META-INF/educational-core.xml
-+++ b/educational-core/resources/META-INF/educational-core.xml
-@@ -191,8 +191,7 @@
-         implementation="com.jetbrains.edu.learning.handlers.AnswerPlaceholderExtendWordHandler"/>
-     <renameHandler implementation="com.jetbrains.edu.learning.handlers.EduRenameHandler"/>
-     <refactoring.moveHandler implementation="com.jetbrains.edu.learning.handlers.EduMoveDelegate" order="first"/>
--    <statistics.projectUsagesCollector implementation="com.jetbrains.edu.learning.statistics.EduUsagesCollector"/>
--    <statistics.usagesCollector implementation="com.jetbrains.edu.learning.statistics.LegacyEduUsagesCollector"/>
-+    <statistics.usagesCollector implementation="com.jetbrains.edu.learning.statistics.EduUsagesCollector"/>
-     <applicationService serviceImplementation="com.jetbrains.edu.learning.statistics.EduUsagesCollector"/>
-     <applicationService serviceImplementation="com.jetbrains.edu.learning.EduSettings"/>
-     <applicationService serviceImplementation="com.jetbrains.edu.learning.statistics.EduStatistics"/>
-diff --git a/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java b/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java
-index 6b6a37f..ca43245 100644
---- a/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java
-+++ b/educational-core/src/com/jetbrains/edu/learning/EduProjectComponent.java
-@@ -11,10 +11,6 @@ import com.intellij.openapi.diagnostic.Logger;
- import com.intellij.openapi.editor.colors.EditorColorsListener;
- import com.intellij.openapi.editor.colors.EditorColorsManager;
- import com.intellij.openapi.editor.colors.EditorColorsScheme;
--import com.intellij.openapi.externalSystem.model.DataNode;
--import com.intellij.openapi.externalSystem.model.project.ProjectData;
--import com.intellij.openapi.externalSystem.service.project.ExternalProjectRefreshCallback;
--import com.intellij.openapi.fileEditor.FileEditorManager;
- import com.intellij.openapi.keymap.Keymap;
- import com.intellij.openapi.keymap.ex.KeymapManagerEx;
- import com.intellij.openapi.module.Module;
-@@ -24,7 +20,6 @@ import com.intellij.openapi.startup.StartupManager;
- import com.intellij.openapi.util.Pair;
- import com.intellij.openapi.util.io.FileUtil;
- import com.intellij.openapi.vfs.VfsUtil;
--import com.intellij.openapi.vfs.VirtualFile;
- import com.intellij.openapi.vfs.VirtualFileManager;
- import com.intellij.openapi.wm.StatusBar;
- import com.intellij.openapi.wm.ToolWindowManager;
-@@ -37,7 +32,6 @@ import com.jetbrains.edu.learning.actions.NextPlaceholderAction;
- import com.jetbrains.edu.learning.actions.PrevPlaceholderAction;
- import com.jetbrains.edu.learning.courseFormat.Course;
- import com.jetbrains.edu.learning.courseFormat.RemoteCourse;
--import com.jetbrains.edu.learning.courseFormat.tasks.Task;
- import com.jetbrains.edu.learning.handlers.UserCreatedFileListener;
- import com.jetbrains.edu.learning.gradle.generation.EduGradleUtils;
- import com.jetbrains.edu.learning.newproject.CourseProjectGenerator;
-@@ -46,7 +40,6 @@ import com.jetbrains.edu.learning.statistics.EduUsagesCollector;
- import com.jetbrains.edu.learning.stepik.*;
- import com.jetbrains.edu.learning.ui.taskDescription.TaskDescriptionToolWindow;
- import org.jetbrains.annotations.NotNull;
--import org.jetbrains.annotations.Nullable;
-
- import javax.swing.*;
- import java.io.File;
-@@ -129,29 +122,10 @@ public class EduProjectComponent implements ProjectComponent {
-       return;
-     }
-
--    if (myProject.getUserData(CourseProjectGenerator.EDU_PROJECT_CREATED) == Boolean.TRUE) {
-+    // Android Studio imports gradle project itself but not in tests
-+    boolean needImportForCurrentPlatform = ApplicationManager.getApplication().isUnitTestMode() || !isAndroidStudio();
-+    if (needImportForCurrentPlatform && myProject.getUserData(CourseProjectGenerator.EDU_PROJECT_CREATED) == Boolean.TRUE) {
-       EduGradleUtils.importGradleProject(myProject, projectBasePath);
--    } else if (isAndroidStudio()) {
--      // Unexpectedly, Android Studio corrupts content root paths after course project reopening
--      // And project structure can't show project tree because of it.
--      // We don't know better and cleaner way how to fix it than to refresh project.
--      EduGradleUtils.importGradleProject(myProject, projectBasePath, new ExternalProjectRefreshCallback() {
--        @Override
--        public void onSuccess(@Nullable DataNode<ProjectData> externalProject) {
--          // We have to open current opened file in project view manually
--          // because it can't restore previous state.
--          VirtualFile[] files = FileEditorManager.getInstance(myProject).getSelectedFiles();
--          for (VirtualFile file : files) {
--            Task task = getTaskForFile(myProject, file);
--            if (task != null) {
--              ProjectView.getInstance(myProject).select(file, file, false);
--            }
--          }
--        }
--
--        @Override
--        public void onFailure(@NotNull String errorMessage, @Nullable String errorDetails) { }
--      });
-     }
-
-     // Android Studio creates `gradlew` not via VFS so we have to refresh project dir
-diff --git a/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt b/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt
-index 7ea0a52..148248f 100644
---- a/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt
-+++ b/educational-core/src/com/jetbrains/edu/learning/gradle/generation/EduGradleUtils.kt
-@@ -1,14 +1,8 @@
- package com.jetbrains.edu.learning.gradle.generation
-
- import com.intellij.ide.fileTemplates.FileTemplateManager
--import com.intellij.openapi.components.ServiceManager
- import com.intellij.openapi.externalSystem.importing.ImportSpecBuilder
--import com.intellij.openapi.externalSystem.model.DataNode
--import com.intellij.openapi.externalSystem.model.ExternalSystemDataKeys
--import com.intellij.openapi.externalSystem.model.project.ProjectData
- import com.intellij.openapi.externalSystem.service.execution.ProgressExecutionMode
--import com.intellij.openapi.externalSystem.service.project.ExternalProjectRefreshCallback
--import com.intellij.openapi.externalSystem.service.project.ProjectDataManager
- import com.intellij.openapi.externalSystem.util.ExternalSystemApiUtil
- import com.intellij.openapi.externalSystem.util.ExternalSystemUtil
- import com.intellij.openapi.project.Project
-@@ -76,34 +70,15 @@ object EduGradleUtils {
-         ExternalSystemUtil.ensureToolWindowInitialized(project, GradleConstants.SYSTEM_ID)
-     }
-
--    @JvmOverloads
-     @JvmStatic
--    fun importGradleProject(project: Project, projectBasePath: String, callback: ExternalProjectRefreshCallback? = null) {
--      val builder = ImportSpecBuilder(project, GradleConstants.SYSTEM_ID)
--        .use(ProgressExecutionMode.IN_BACKGROUND_ASYNC)
--        .dontReportRefreshErrors()
--      if (callback == null) {
--        builder.useDefaultCallback()
--      } else {
--        builder.callback(object : ExternalProjectRefreshCallback {
--          override fun onSuccess(externalProject: DataNode<ProjectData>?) {
--            // We have to import data manually because we use custom callback
--            // but default callback code is private.
--            // See `com.intellij.openapi.externalSystem.importing.ImportSpecBuilder#build`
--            if (externalProject != null) {
--              ServiceManager.getService(ProjectDataManager::class.java).importData(externalProject, project, false)
--            }
--            callback.onSuccess(externalProject)
--          }
--
--          override fun onFailure(errorMessage: String, errorDetails: String?) {
--            callback.onFailure(errorMessage, errorDetails)
--          }
--        })
--      }
--      // Build toolwindow will be opened if `ExternalSystemDataKeys.NEWLY_IMPORTED_PROJECT` is true while sync
--      project.putUserData(ExternalSystemDataKeys.NEWLY_IMPORTED_PROJECT, null)
--      ExternalSystemUtil.refreshProject(projectBasePath, builder.build())
-+    fun importGradleProject(project: Project, projectBasePath: String) {
-+        ExternalSystemUtil.refreshProject(projectBasePath,
-+                                          ImportSpecBuilder(project, GradleConstants.SYSTEM_ID)
-+                                            .useDefaultCallback()
-+                                            .use(ProgressExecutionMode.IN_BACKGROUND_ASYNC)
-+                                            .dontReportRefreshErrors()
-+                                            .build(),
-+                                          false)
-     }
-
-     @JvmStatic
-diff --git a/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt b/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt
-index 6868df3..5895dda 100644
---- a/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt
-+++ b/educational-core/src/com/jetbrains/edu/learning/projectView/CourseViewPane.kt
-@@ -75,7 +75,7 @@ class CourseViewPane(project: Project) : AbstractProjectViewPSIPane(project) {
-
-   override fun createComponent(): JComponent {
-     val component = super.createComponent()
--    installComparator(EduNodeComparator)
-+    installComparator(treeBuilder, EduNodeComparator)
-
-     if (!EduUtils.isStudentProject(myProject)) return component
-     val panel = JPanel(BorderLayout())
-diff --git a/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java b/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java
-index 2dc0863..02af30e 100644
---- a/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java
-+++ b/educational-core/src/com/jetbrains/edu/learning/statistics/EduUsagesCollector.java
-@@ -15,18 +15,18 @@
-  */
- package com.jetbrains.edu.learning.statistics;
-
-+import com.intellij.internal.statistic.UsagesCollector;
-+import com.intellij.internal.statistic.beans.GroupDescriptor;
- import com.intellij.internal.statistic.beans.UsageDescriptor;
--import com.intellij.internal.statistic.service.fus.collectors.ProjectUsagesCollector;
- import com.intellij.openapi.components.ServiceManager;
--import com.intellij.openapi.project.Project;
- import com.intellij.util.containers.hash.HashSet;
- import gnu.trove.TObjectIntHashMap;
- import org.jetbrains.annotations.NotNull;
-
- import java.util.Set;
-
--public class EduUsagesCollector extends ProjectUsagesCollector {
--  public static final String GROUP_ID = "statistics.educational";
-+public class EduUsagesCollector extends UsagesCollector {
-+  private static final String GROUP_ID = "educational";
-
-   public static void projectTypeCreated(@NotNull String projectTypeId) {
-     advanceKey("project.created." + projectTypeId);
-@@ -94,12 +94,7 @@ public class EduUsagesCollector extends ProjectUsagesCollector {
-
-   @NotNull
-   @Override
--  public Set<UsageDescriptor> getUsages(@NotNull Project project) {
--    return collectUsages();
--  }
--
--  @NotNull
--  static Set<UsageDescriptor> collectUsages() {
-+  public Set<UsageDescriptor> getUsages() {
-     HashSet<UsageDescriptor> descriptors = new HashSet<>();
-     getDescriptors().forEachEntry((key, value) -> {
-       descriptors.add(new UsageDescriptor(key, value));
-@@ -109,10 +104,11 @@ public class EduUsagesCollector extends ProjectUsagesCollector {
-     return descriptors;
-   }
-
-+
-   @NotNull
-   @Override
--  public String getGroupId() {
--    return GROUP_ID;
-+  public GroupDescriptor getGroupId() {
-+    return GroupDescriptor.create(GROUP_ID);
-   }
-
-   private static void advanceKey(@NotNull String key) {
-diff --git a/educational-core/src/com/jetbrains/edu/learning/statistics/LegacyEduUsagesCollector.java b/educational-core/src/com/jetbrains/edu/learning/statistics/LegacyEduUsagesCollector.java
-deleted file mode 100644
-index b7d765d..0000000
---- a/educational-core/src/com/jetbrains/edu/learning/statistics/LegacyEduUsagesCollector.java
-+++ /dev/null
-@@ -1,30 +0,0 @@
--package com.jetbrains.edu.learning.statistics;
--
--import com.intellij.internal.statistic.UsagesCollector;
--import com.intellij.internal.statistic.beans.GroupDescriptor;
--import com.intellij.internal.statistic.beans.UsageDescriptor;
--import org.jetbrains.annotations.NotNull;
--
--import java.util.Set;
--
--import static com.jetbrains.edu.learning.statistics.EduUsagesCollector.GROUP_ID;
--
--/**
-- * To be removed in 2018.2
-- * See FrameworkUsageCollector
-- */
--@Deprecated
--public class LegacyEduUsagesCollector extends UsagesCollector {
--
--  @NotNull
--  @Override
--  public GroupDescriptor getGroupId() {
--    return GroupDescriptor.create(GROUP_ID);
--  }
--
--  @NotNull
--  @Override
--  public Set<UsageDescriptor> getUsages() {
--    return EduUsagesCollector.collectUsages();
--  }
--}
-\ No newline at end of file
-diff --git a/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java b/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java
-index 0d20b14..67304d7 100644
---- a/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java
-+++ b/educational-core/src/com/jetbrains/edu/learning/stepik/StepikAdaptiveConnector.java
-@@ -353,7 +353,7 @@ public class StepikAdaptiveConnector {
-   private static void setToolWindowText(@NotNull Project project, @NotNull Task task) {
-     final TaskDescriptionToolWindow window = EduUtils.getStudyToolWindow(project);
-     if (window != null) {
--      ApplicationManager.getApplication().invokeLater(() -> window.setCurrentTask(project, task));
-+      window.setCurrentTask(project, task);
-     }
-   }
-
-diff --git a/educational-core/src/icons/EducationalCoreIcons.java b/educational-core/src/icons/EducationalCoreIcons.java
-index a9c1908..8416b7c 100644
---- a/educational-core/src/icons/EducationalCoreIcons.java
-+++ b/educational-core/src/icons/EducationalCoreIcons.java
-@@ -37,5 +37,5 @@ public class EducationalCoreIcons {
-
-   public static final Icon CourseAction = load("/icons/com/jetbrains/edu/eduCourseAction.png"); // 16x16
-   public static final Icon CourseTree = load("/icons/com/jetbrains/edu/eduCourseTree.png"); // 16x16
--  public static final Icon CourseToolWindow = load("/icons/com/jetbrains/edu/eduCourseTask.svg"); // 13x13
-+  public static final Icon CourseToolWindow = load("/icons/com/jetbrains/edu/eduCourseTask181.png"); // 13x13
- }
-diff --git a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt
-index 2305cf1..41ea5bb 100644
---- a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt
-+++ b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTest.kt
-@@ -49,6 +49,7 @@ class CourseViewTest : CourseViewTestBase() {
-                           "   +TaskNode task2\n" +
-                           "   +TaskNode task3\n" +
-                           "   +TaskNode task4\n"
-+    waitWhileBusy(pane.tree)
-     PlatformTestUtil.assertTreeEqual(pane.tree, structure)
-   }
-
-diff --git a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt
-index 0d72018..28a4b79 100644
---- a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt
-+++ b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/CourseViewTestBase.kt
-@@ -1,11 +1,15 @@
- package com.jetbrains.edu.learning.courseView
-
- import com.intellij.ide.projectView.ProjectView
-+import com.intellij.ide.util.treeView.AbstractTreeBuilder
- import com.intellij.testFramework.PlatformTestUtil
- import com.intellij.testFramework.ProjectViewTestUtil
-+import com.intellij.ui.tree.AsyncTreeModel
-+import com.intellij.util.ui.UIUtil
- import com.intellij.util.ui.tree.TreeUtil
- import com.jetbrains.edu.learning.EduActionTestCase
- import com.jetbrains.edu.learning.projectView.CourseViewPane
-+import java.util.concurrent.TimeUnit
- import javax.swing.JTree
-
- abstract class CourseViewTestBase : EduActionTestCase() {
-@@ -32,6 +36,34 @@ abstract class CourseViewTestBase : EduActionTestCase() {
-   }
-
-   protected fun waitWhileBusy(tree: JTree) {
--    PlatformTestUtil.waitWhileBusy(tree)
-+    val startTimeMillis = System.currentTimeMillis()
-+    while (isBusy(tree)) {
-+      assertMaxWaitTimeSince(startTimeMillis)
-+    }
-+  }
-+
-+  private fun getMillisSince(startTimeMillis: Long): Long {
-+    return System.currentTimeMillis() - startTimeMillis
-+  }
-+
-+  private fun assertMaxWaitTimeSince(startTimeMillis: Long) {
-+    assert(getMillisSince(startTimeMillis) <= MAX_WAIT_TIME) { "the waiting takes too long" }
-+  }
-+
-+  private fun isBusy(tree: JTree): Boolean {
-+    UIUtil.dispatchAllInvocationEvents()
-+    val model = tree.model
-+    if (model is AsyncTreeModel) {
-+      if (model.isProcessing) return true
-+      UIUtil.dispatchAllInvocationEvents()
-+      return model.isProcessing
-+    }
-+    val builder = AbstractTreeBuilder.getBuilderFor(tree) ?: return false
-+    val ui = builder.ui ?: return false
-+    return ui.hasPendingWork()
-+  }
-+
-+  companion object {
-+    private val MAX_WAIT_TIME = TimeUnit.MINUTES.toMillis(2)
-   }
- }
-diff --git a/resources/META-INF/plugin.xml b/resources/META-INF/plugin.xml
-index 93c3939..aae2638 100644
---- a/resources/META-INF/plugin.xml
-+++ b/resources/META-INF/plugin.xml
-@@ -8,6 +8,7 @@
-     <!--update changes in changes.html file instead-->
-     <change-notes/>
-     <depends>com.intellij.modules.lang</depends>
-+    <depends>com.intellij.modules.androidstudio</depends>
- 
-     <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
-     <depends optional="true" config-file="Edu-Scala.xml">org.intellij.scala</depends>
diff --git a/resources/META-INF/plugin.xml b/resources/META-INF/plugin.xml
index 791d717b8..60d371ea1 100644
--- a/resources/META-INF/plugin.xml
+++ b/resources/META-INF/plugin.xml
@@ -8,6 +8,7 @@
     <!--update changes in changes.html file instead-->
     <change-notes/>
     <depends>com.intellij.modules.lang</depends>
+    <depends>com.intellij.modules.androidstudio</depends>
 
     <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Scala.xml">org.intellij.scala</depends>
diff --git a/settings.gradle b/settings.gradle
index b120c4d1e..1d02a34bc 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,2 +1,2 @@
 rootProject.name = 'educational-plugin'
-include 'Edu-Java', 'Edu-Scala', 'Edu-Kotlin', 'Edu-Python', 'educational-core', 'Edu-Android', 'Edu-JavaScript'
\ No newline at end of file
+include 'Edu-Java', 'Edu-Scala', 'Edu-Kotlin', 'Edu-Python', 'educational-core', 'Edu-Android'
\ No newline at end of file

diff --git a/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt b/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt
index b008fcf..38e0487 100644
--- a/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt
+++ b/Edu-Android/src/com/jetbrains/edu/android/AndroidNewTaskDialog.kt
@@ -44,8 +44,7 @@ class AndroidNewTaskDialog(

   override fun createAdditionalFields(builder: LayoutBuilder) {
     val androidVersionsInfo = AndroidVersionsInfo()
-    androidVersionsInfo.loadLocalVersions()
-    androidVersionsInfo.loadRemoteTargetVersions(FormFactor.MOBILE, FormFactor.MOBILE.minOfflineApiLevel) { items ->
+    androidVersionsInfo.loadTargetVersions(FormFactor.MOBILE, FormFactor.MOBILE.minOfflineApiLevel) { items ->
       val maxSdkVersion = items.map { it.minApiLevel }.max() ?: FormFactor.MOBILE.maxOfflineApiLevel
       compileSdkVersion = maxOf(maxSdkVersion, compileSdkVersion)
       comboBox.init(FormFactor.MOBILE, items)
diff --git a/Edu-Android/testResources/META-INF/plugin.xml b/Edu-Android/testResources/META-INF/plugin.xml
index 42c32aa..9255cd7 100644
--- a/Edu-Android/testResources/META-INF/plugin.xml
+++ b/Edu-Android/testResources/META-INF/plugin.xml
@@ -1,5 +1,6 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.android</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Android.xml">org.jetbrains.android</depends>

     <extensions defaultExtensionNs="Educational">
diff --git a/Edu-Java/resources/META-INF/Edu-Java.xml b/Edu-Java/resources/META-INF/Edu-Java.xml
index df4d8c1..a1de788 100644
--- a/Edu-Java/resources/META-INF/Edu-Java.xml
+++ b/Edu-Java/resources/META-INF/Edu-Java.xml
@@ -6,6 +6,7 @@

   <extensions defaultExtensionNs="Educational">
     <configurator language="JAVA" implementationClass="com.jetbrains.edu.java.JConfigurator"/>
+    <languageDecorator language="JAVA" implementationClass="com.jetbrains.edu.java.JLanguageDecorator"/>
   </extensions>

   <extensions defaultExtensionNs="com.intellij">
diff --git a/Edu-Java/src/com/jetbrains/edu/java/JLanguageDecorator.kt b/Edu-Java/src/com/jetbrains/edu/java/JLanguageDecorator.kt
new file mode 100644
index 0000000..29118be
--- /dev/null
+++ b/Edu-Java/src/com/jetbrains/edu/java/JLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.java
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+open class JLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/clike.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "text/x-java"
+}
diff --git a/Edu-Java/testResources/META-INF/plugin.xml b/Edu-Java/testResources/META-INF/plugin.xml
index c09e7e7..5278ba5 100644
--- a/Edu-Java/testResources/META-INF/plugin.xml
+++ b/Edu-Java/testResources/META-INF/plugin.xml
@@ -1,5 +1,6 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.java</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Java.xml">com.intellij.modules.java</depends>

     <extensions defaultExtensionNs="Educational">
diff --git a/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/JsLanguageSettings.java b/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/JsLanguageSettings.java
index 0fdd315..6bd8dee 100644
--- a/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/JsLanguageSettings.java
+++ b/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/JsLanguageSettings.java
@@ -1,6 +1,7 @@
 package com.jetbrains.edu.javascript.learning;

 import com.intellij.javascript.nodejs.interpreter.*;
+import com.intellij.javascript.nodejs.interpreter.local.NodeJsLocalInterpreter;
 import com.intellij.openapi.project.Project;
 import com.intellij.openapi.project.ProjectManager;
 import com.intellij.openapi.ui.LabeledComponent;
@@ -51,6 +52,6 @@ public class JsLanguageSettings extends LanguageSettings<JsNewProjectSettings> {
   @Override
   public String validate() {
     NodeJsInterpreter interpreter = myInterpreterField.getInterpreter();
-    return NodeInterpreterUtil.validateAndGetErrorMessage(interpreter);
+    return NodeJsLocalInterpreter.getErrorMessage(interpreter);
   }
 }
diff --git a/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/checkio/newProject/JsCheckiOCourseProjectGenerator.java b/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/checkio/newProject/JsCheckiOCourseProjectGenerator.java
index 30c8560..23a3a53 100644
--- a/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/checkio/newProject/JsCheckiOCourseProjectGenerator.java
+++ b/Edu-JavaScript/src/com/jetbrains/edu/javascript/learning/checkio/newProject/JsCheckiOCourseProjectGenerator.java
@@ -2,8 +2,6 @@ package com.jetbrains.edu.javascript.learning.checkio.newProject;

 import com.intellij.javascript.nodejs.interpreter.NodeJsInterpreter;
 import com.intellij.javascript.nodejs.interpreter.NodeJsInterpreterManager;
-import com.intellij.javascript.nodejs.library.core.NodeCoreLibraryConfigurator;
-import com.intellij.javascript.nodejs.settings.NodeSettingsConfigurable;
 import com.intellij.openapi.application.ApplicationManager;
 import com.intellij.openapi.application.ModalityState;
 import com.intellij.openapi.diagnostic.Logger;
@@ -15,6 +13,8 @@ import com.jetbrains.edu.javascript.learning.JsNewProjectSettings;
 import com.jetbrains.edu.javascript.learning.checkio.JsCheckiOCourseBuilder;
 import com.jetbrains.edu.learning.courseFormat.Course;
 import com.jetbrains.edu.learning.newproject.CourseProjectGenerator;
+import com.jetbrains.nodejs.library.NodeJsCoreLibraryConfigurator;
+import com.jetbrains.nodejs.settings.NodeSettingsConfigurable;
 import org.jetbrains.annotations.NotNull;

 public class JsCheckiOCourseProjectGenerator extends CourseProjectGenerator<JsNewProjectSettings> {
@@ -37,7 +37,7 @@ public class JsCheckiOCourseProjectGenerator extends CourseProjectGenerator<JsNe
     ModalityState modalityState = ModalityState.current();
     interpreter.provideCachedVersionOrFetch(version -> ApplicationManager.getApplication().invokeLater(() -> {
         if (version != null) {
-          NodeCoreLibraryConfigurator configurator = NodeCoreLibraryConfigurator.getInstance(project);
+          NodeJsCoreLibraryConfigurator configurator = NodeJsCoreLibraryConfigurator.getInstance(project);
           configurator.configureAndAssociateWithProject(interpreter, version, null);
         }
         else {
diff --git a/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml b/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml
index a9e2bf8..591a12f 100644
--- a/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml
+++ b/Edu-Kotlin/resources/META-INF/Edu-Kotlin.xml
@@ -15,6 +15,7 @@
     <twitterPluginConfigurator implementation="com.jetbrains.edu.kotlin.twitter.KtTwitterConfigurator"/>
     <optionsProvider instance="com.jetbrains.edu.kotlin.twitter.KtOptionsProvider"/>
     <coursesProvider implementation="com.jetbrains.edu.kotlin.KtBundledCoursesProvider"/>
+    <languageDecorator implementationClass="com.jetbrains.edu.kotlin.KtLanguageDecorator" language="kotlin"/>

     <!-- Coursera -->
     <configurator implementationClass="com.jetbrains.edu.kotlin.coursera.CourseraKtConfigurator" language="kotlin" courseType="Coursera" />
diff --git a/Edu-Kotlin/src/com/jetbrains/edu/kotlin/KtLanguageDecorator.kt b/Edu-Kotlin/src/com/jetbrains/edu/kotlin/KtLanguageDecorator.kt
new file mode 100644
index 0000000..9a842b3
--- /dev/null
+++ b/Edu-Kotlin/src/com/jetbrains/edu/kotlin/KtLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.kotlin
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+class KtLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/clike.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "text/x-java"
+}
diff --git a/Edu-Kotlin/testResources/META-INF/plugin.xml b/Edu-Kotlin/testResources/META-INF/plugin.xml
index 1f4d269..c9fb71c 100644
--- a/Edu-Kotlin/testResources/META-INF/plugin.xml
+++ b/Edu-Kotlin/testResources/META-INF/plugin.xml
@@ -1,5 +1,6 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.kotlin</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Kotlin.xml">com.intellij.modules.java</depends>

     <extensions defaultExtensionNs="Educational">
diff --git a/Edu-Python/resources/META-INF/Edu-Python.xml b/Edu-Python/resources/META-INF/Edu-Python.xml
index ce9b989..73f99d7 100644
--- a/Edu-Python/resources/META-INF/Edu-Python.xml
+++ b/Edu-Python/resources/META-INF/Edu-Python.xml
@@ -22,6 +22,7 @@
     <configurator implementationClass="com.jetbrains.edu.python.learning.PyConfigurator" language="Python"/>
     <configurator implementationClass="com.jetbrains.edu.python.learning.pycharm.PyConfigurator" language="Python"/>
     <coursesProvider implementation="com.jetbrains.edu.python.learning.PyBundledCoursesProvider"/>
+    <languageDecorator implementationClass="com.jetbrains.edu.python.learning.PyLanguageDecorator" language="Python" />
   </extensions>

   <actions>
diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/PyLanguageDecorator.kt b/Edu-Python/src/com/jetbrains/edu/python/learning/PyLanguageDecorator.kt
new file mode 100644
index 0000000..32f9226
--- /dev/null
+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/PyLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.python.learning
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+open class PyLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/python.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "python"
+}
diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java b/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
index 47d0003..d17ba91 100644
--- a/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/newproject/PyCourseProjectGenerator.java
@@ -81,14 +81,14 @@ public class PyCourseProjectGenerator extends CourseProjectGenerator<PyNewProjec
           final PyPackageManager packageManager = PyPackageManager.getInstance(baseSdk);
           return packageManager.createVirtualEnv(virtualEnvPath, false);
         }
-      }, getAllSdks(), baseSdk, project.getBasePath(), null);
+      }, getAllSdks(), baseSdk, project.getBasePath());
       if (sdk == null) {
         LOG.warn("Failed to create virtual env in " + virtualEnvPath);
         return;
       }
       settings.setSdk(sdk);
       SdkConfigurationUtil.addSdk(sdk);
-      PySdkExtKt.associateWithModule(sdk, null, project.getBasePath());
+      PySdkExtKt.associateWithProject(sdk, project, false);
     }
   }

diff --git a/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt b/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
index 3f1a875..ca30893 100644
--- a/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
+++ b/Edu-Python/src/com/jetbrains/edu/python/learning/pycharm/PyLanguageSettings.kt
@@ -17,7 +17,7 @@ internal open class PyLanguageSettings : PyLanguageSettings() {
       if (it != null && PythonSdkType.isVirtualEnv(it)) {
         val data = it.sdkAdditionalData as PythonSdkAdditionalData?
         if (data != null) {
-          val path = data.associatedModulePath
+          val path = data.associatedProjectPath
           if (path != null) {
             return@removeIf true
           }
@@ -27,7 +27,7 @@ internal open class PyLanguageSettings : PyLanguageSettings() {
     }

     val sdks = if (fakeSdk != null) ContainerUtil.prepend(registeredSdks, fakeSdk) else registeredSdks
-    val sdkChooser = PythonSdkChooserCombo(null, null, sdks, null) { true }
+    val sdkChooser = PythonSdkChooserCombo(null, sdks, null) { true }
     sdkChooser.addChangedListener {
       mySettings.sdk = sdkChooser.comboBox.selectedItem as? Sdk
       notifyListeners()
diff --git a/Edu-Python/testResources/META-INF/plugin.xml b/Edu-Python/testResources/META-INF/plugin.xml
index 5c71583..a20004f 100644
--- a/Edu-Python/testResources/META-INF/plugin.xml
+++ b/Edu-Python/testResources/META-INF/plugin.xml
@@ -1,4 +1,5 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.python</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Python.xml">com.intellij.modules.python</depends>
 </idea-plugin>
diff --git a/Edu-Scala/resources/META-INF/Edu-Scala.xml b/Edu-Scala/resources/META-INF/Edu-Scala.xml
index 815bd92..a1fdadc 100644
--- a/Edu-Scala/resources/META-INF/Edu-Scala.xml
+++ b/Edu-Scala/resources/META-INF/Edu-Scala.xml
@@ -5,6 +5,7 @@

   <extensions defaultExtensionNs="Educational">
     <configurator language="Scala" implementationClass="com.jetbrains.edu.scala.ScalaConfigurator"/>
+    <languageDecorator language="Scala" implementationClass="com.jetbrains.edu.scala.ScalaLanguageDecorator"/>
   </extensions>

 </idea-plugin>
diff --git a/Edu-Scala/src/com/jetbrains/edu/scala/ScalaLanguageDecorator.kt b/Edu-Scala/src/com/jetbrains/edu/scala/ScalaLanguageDecorator.kt
new file mode 100644
index 0000000..ddcf558
--- /dev/null
+++ b/Edu-Scala/src/com/jetbrains/edu/scala/ScalaLanguageDecorator.kt
@@ -0,0 +1,8 @@
+package com.jetbrains.edu.scala
+
+import com.jetbrains.edu.learning.EduLanguageDecorator
+
+class ScalaLanguageDecorator : EduLanguageDecorator {
+  override fun getLanguageScriptUrl(): String = javaClass.classLoader.getResource("/code-mirror/clike.js").toExternalForm()
+  override fun getDefaultHighlightingMode(): String = "text/x-scala"
+}
diff --git a/Edu-Scala/testResources/META-INF/plugin.xml b/Edu-Scala/testResources/META-INF/plugin.xml
index 5eca860..edce814 100644
--- a/Edu-Scala/testResources/META-INF/plugin.xml
+++ b/Edu-Scala/testResources/META-INF/plugin.xml
@@ -1,4 +1,5 @@
 <idea-plugin xmlns:xi="http://www.w3.org/2001/XInclude">
     <id>com.jetbrains.edu.scala</id>
+    <xi:include href="/META-INF/educational-core.xml" xpointer="xpointer(/idea-plugin/*)"/>
     <depends optional="true" config-file="Edu-Scala.xml">org.intellij.scala</depends>
 </idea-plugin>
diff --git a/build.gradle b/build.gradle
index 65627a7..b900a25 100644
--- a/build.gradle
+++ b/build.gradle
@@ -154,7 +154,6 @@ allprojects {
     }

     dependencies {
-        compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
         compile group: 'org.twitter4j', name: 'twitter4j-core', version: '4.0.1'
         compile 'org.jsoup:jsoup:1.11.2'
         compile("org.jetbrains:markdown:0.1.28") {
diff --git a/educational-core/resources/style/template.html.ft b/educational-core/resources/style/template.html.ft
index dc5b095..2a6dfa3 100644
--- a/educational-core/resources/style/template.html.ft
+++ b/educational-core/resources/style/template.html.ft
@@ -7,6 +7,12 @@
   <script type="text/javascript" src="${jquery}"></script>
   <script type="text/javascript" src="${toggle_hint_script}"></script>
   <script type="text/x-mathjax-config" src="${mathjax_script}"></script>
+  <script src="${codemirror}"></script>
+  <script src="${colorize}"></script>
+  <script src="${runmode}"></script>
+  <script src="${javascript}"></script>
+  <script src="${language_script}"></script>
+  <link rel="stylesheet" type="text/css" href="${css_codemirror}"></link>

   <link rel="stylesheet" type="text/css" href="${hint_base}"></link>
   <link rel="stylesheet" type="text/css" href="${hint_laf_specific}"></link>
@@ -21,5 +27,6 @@
     ${content}
 </div>

+<script>${highlight_code}</script>
 </body>
 </html>
\ No newline at end of file
diff --git a/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java b/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java
index df00d84..2d85601 100644
--- a/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java
+++ b/educational-core/src/com/jetbrains/edu/learning/EduLanguageDecorator.java
@@ -2,6 +2,7 @@ package com.jetbrains.edu.learning;

 import com.intellij.lang.LanguageExtension;
 import com.intellij.ui.JBColor;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;

 public interface EduLanguageDecorator {
@@ -10,6 +11,27 @@ public interface EduLanguageDecorator {
   LanguageExtension<EduLanguageDecorator> INSTANCE = new LanguageExtension<>(EP_NAME);

   /**
+   * Used for code highlighting in Task Description tool window.
+   * Scripts for different languages can be found <a href="https://codemirror.net">here</a>.
+   *
+   * For example, <a href="https://github.com/JetBrains/educational-plugins/tree/master/Edu-Python/resources/python.js">highlighting script</a> for python language.
+   */
+  @NotNull
+  default String getLanguageScriptUrl() {
+    return "";
+  }
+
+  /**
+   * Used for code highlighting in Task Description tool window
+   *
+   * @return parameter for CodeMirror script. Available languages: @see <@linktourl http://codemirror.net/mode/>
+   */
+  @NotNull
+  default String getDefaultHighlightingMode() {
+    return "";
+  }
+
+  /**
    * Gets tag color for decorator language.
    *
    * If it returns null then color for language will be taken
diff --git a/educational-core/src/com/jetbrains/edu/learning/coursera/CourseraTaskChecker.kt b/educational-core/src/com/jetbrains/edu/learning/coursera/CourseraTaskChecker.kt
index 19d31e5..bc59a33 100644
--- a/educational-core/src/com/jetbrains/edu/learning/coursera/CourseraTaskChecker.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/coursera/CourseraTaskChecker.kt
@@ -121,7 +121,7 @@ class CourseraTaskChecker : RemoteTaskChecker {
       if (message != null) {
         val messageLabel = JBLabel(message)
         messageLabel.foreground = JBColor.RED
-        messageLabel.withFont(JBUI.Fonts.label().asBold())
+        messageLabel.font = JBUI.Fonts.label().asBold()
         row { messageLabel() }
       }
       row("Email:") { emailField(growPolicy = GrowPolicy.MEDIUM_TEXT) }
diff --git a/educational-core/src/com/jetbrains/edu/learning/editor/EduSingleFileEditor.kt b/educational-core/src/com/jetbrains/edu/learning/editor/EduSingleFileEditor.kt
index 635fe18..770bf06 100644
--- a/educational-core/src/com/jetbrains/edu/learning/editor/EduSingleFileEditor.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/editor/EduSingleFileEditor.kt
@@ -43,9 +43,9 @@ class EduSingleFileEditor(
     return EduEditorState(state, null)
   }

-  override fun setState(state: FileEditorState, exactState: Boolean) {
+  override fun setState(state: FileEditorState) {
     val realState = (state as? EduEditorState)?.mainEditorState ?: state
-    super<PsiAwareTextEditorImpl>.setState(realState, exactState)
+    super<PsiAwareTextEditorImpl>.setState(realState)
   }

   override fun validateTaskFile() {
diff --git a/educational-core/src/com/jetbrains/edu/learning/editor/EduSplitEditor.kt b/educational-core/src/com/jetbrains/edu/learning/editor/EduSplitEditor.kt
index 8cbed83..583a754 100644
--- a/educational-core/src/com/jetbrains/edu/learning/editor/EduSplitEditor.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/editor/EduSplitEditor.kt
@@ -55,11 +55,11 @@ class EduSplitEditor(
     return EduEditorState(mainEditorState.mainEditorState, secondaryEditor.getState(level))
   }

-  override fun setState(state: FileEditorState, exactState: Boolean) {
+  override fun setState(state: FileEditorState) {
     if (state is EduEditorState) {
-      mainEditor.setState(state, exactState)
+      mainEditor.setState(state)
       state.secondaryEditorState?.also {
-        secondaryEditor.setState(it, exactState)
+        secondaryEditor.setState(it)
       }
     }
   }
diff --git a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/EduCodeHighlighter.kt b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/EduCodeHighlighter.kt
deleted file mode 100644
index b2d6605..0000000
--- a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/EduCodeHighlighter.kt
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.jetbrains.edu.learning.ui.taskDescription
-
-import com.intellij.codeEditor.printing.HTMLTextPainter
-import com.intellij.lang.Language
-import com.intellij.openapi.project.Project
-import com.intellij.psi.PsiFileFactory
-import org.jsoup.Jsoup
-import org.jsoup.nodes.Element
-import org.jsoup.nodes.TextNode
-
-class EduCodeHighlighter {
-
-  companion object {
-    @JvmStatic
-    fun highlightCodeFragments(project: Project, html: String, defaultLanguage: Language): String {
-      val document = Jsoup.parse(html)
-
-      val codeElements = document.select("code")
-
-      for (codeElement in codeElements) {
-        val textNode = codeElement.childNodes().singleOrNull() as? TextNode ?: continue
-        val text = textNode.wholeText
-        val language = codeElement.language() ?: defaultLanguage
-
-        val psiFile = PsiFileFactory.getInstance(project).createFileFromText(language, "")
-        if (psiFile == null) return html
-
-        val codeText = HTMLTextPainter.convertCodeFragmentToHTMLFragmentWithInlineStyles(psiFile, text)
-
-        val parent = codeElement.parent()
-        // We have to check `parent.parent()` for null
-        // because in case of incomplete code `parent.parent()` can be null
-        // and in this case `parent.after(codeText)` throws `IllegalArgumentException`
-        if (parent.tagName() == "pre" && parent.parent() != null) {
-          parent.after(codeText)
-          parent.remove()
-        } else {
-          val inlineCodeText = codeText.trim().removeSurrounding("<pre>", "</pre>")
-          codeElement.after(inlineCodeText)
-          codeElement.remove()
-        }
-      }
-
-      return document.toString()
-    }
-
-    private fun Element.language(): Language? {
-      val lang = when {
-        hasAttr("data-lang") -> attr("data-lang").removePrefix("text/x-")
-        attr("class").startsWith("language-") -> attr("class").removePrefix("language-")
-        else -> return null
-      }
-      if (lang.isEmpty()) return null
-
-      return Language.getRegisteredLanguages().find { it.id.toLowerCase() == lang }
-    }
-  }
-}
diff --git a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java
index 64500f1..bf276d7 100644
--- a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java
+++ b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/TaskDescriptionToolWindow.java
@@ -80,7 +80,7 @@ public abstract class TaskDescriptionToolWindow {
     if (task != null) {
       String taskText = EduUtils.getTaskTextFromTask(task.getTaskDir(project), task);
       if (taskText != null) {
-        return EduCodeHighlighter.highlightCodeFragments(project, taskText, task.getCourse().getLanguageById());
+        return taskText;
       }
     }
     return EMPTY_TASK_TEXT;
diff --git a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleManager.kt b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleManager.kt
index e798a17..a9af820 100644
--- a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleManager.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleManager.kt
@@ -1,7 +1,5 @@
 package com.jetbrains.edu.learning.ui.taskDescription.styleManagers

-import com.intellij.ide.ui.LafManager
-import com.intellij.ide.ui.laf.UIThemeBasedLookAndFeelInfo
 import com.intellij.openapi.diagnostic.Logger
 import com.intellij.openapi.project.Project
 import com.intellij.openapi.util.SystemInfo
@@ -70,10 +68,7 @@ internal fun resourceUrl(name: String): String {

 internal fun resourceFileName(): String {
   return when {
-    isHighcontrast() -> "highcontrast"
     UIUtil.isUnderDarcula() -> "darcula"
     else -> "light"
   }
-}
-
-internal fun isHighcontrast() = LafManager.getInstance().currentLookAndFeel is UIThemeBasedLookAndFeelInfo
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt
index f317331..f2f6409 100644
--- a/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt
+++ b/educational-core/src/com/jetbrains/edu/learning/ui/taskDescription/styleManagers/StyleResourcesManager.kt
@@ -2,22 +2,33 @@ package com.jetbrains.edu.learning.ui.taskDescription.styleManagers

 import com.intellij.openapi.project.Project
 import com.jetbrains.edu.learning.EduLanguageDecorator
-import com.intellij.util.ui.UIUtil
 import com.jetbrains.edu.learning.EduSettings
+import com.jetbrains.edu.learning.StudyTaskManager
 import com.jetbrains.edu.learning.ui.taskDescription.loadText
 import kotlinx.css.*
 import kotlinx.css.properties.lh

 internal class StyleResourcesManager(project: Project, taskText: String) {
+  private fun decorator(project: Project): EduLanguageDecorator? {
+    val language = StudyTaskManager.getInstance(project).course?.languageById
+    return language?.let { EduLanguageDecorator.INSTANCE.forLanguage(language) }
+  }

   // update style/template.html.ft in case of changing key names
   val resources = mapOf(
     "typography_color_style" to typographyAndColorStylesheet(),
+    "language_script" to (decorator(project)?.languageScriptUrl ?: ""),
     "content" to taskText,
+    "highlight_code" to highlightScript(project),
     "base_css" to loadText("/style/browser.css"),
+    resourcePair("codemirror", "/code-mirror/codemirror.js"),
     resourcePair("jquery", ("/style/hint/jquery-1.9.1.js")),
+    resourcePair("runmode", "/code-mirror/runmode.js"),
+    resourcePair("colorize", "/code-mirror/colorize.js"),
+    resourcePair("javascript", "/code-mirror/javascript.js"),
     resourcePair("hint_base", "/style/hint/base.css"),
     resourcePair("hint_laf_specific",  "/style/hint/${resourceFileName()}.css"),
+    resourcePair("css_codemirror", "/code-mirror/${resourceFileName()}.css"),
     resourcePair("toggle_hint_script", "/style/hint/toggleHint.js"),
     resourcePair("mathjax_script", "/style/mathjaxConfigure.js"),
     resourcePair("stepik_link", "/style/stepikLink.css")
@@ -55,4 +66,9 @@ internal class StyleResourcesManager(project: Project, taskText: String) {
       }
     }.toString()
   }
+
+  private fun highlightScript(project: Project): String {
+    val loadText = loadText("/code-mirror/highlightCode.js.ft")
+    return loadText?.replace("\${default_mode}", (decorator(project)?.defaultHighlightingMode ?: "")) ?: ""
+  }
 }
\ No newline at end of file
diff --git a/educational-core/src/icons/EducationalCoreIcons.java b/educational-core/src/icons/EducationalCoreIcons.java
index fe572b2..e402209 100644
--- a/educational-core/src/icons/EducationalCoreIcons.java
+++ b/educational-core/src/icons/EducationalCoreIcons.java
@@ -39,7 +39,7 @@ public class EducationalCoreIcons {

   public static final Icon CourseAction = load("/icons/com/jetbrains/edu/eduCourseAction.png"); // 16x16
   public static final Icon CourseTree = load("/icons/com/jetbrains/edu/eduCourseTree.png"); // 16x16
-  public static final Icon CourseToolWindow = load("/icons/com/jetbrains/edu/eduCourseTask.svg"); // 13x13
+  public static final Icon CourseToolWindow = load("/icons/com/jetbrains/edu/eduCourseTask181.png"); // 13x13

   public static final Icon ResultCorrect = load("/icons/com/jetbrains/edu/learning/resultCorrect.svg"); // 16x16
   public static final Icon ResetTask = load("/icons/com/jetbrains/edu/learning/resetTask.svg"); // 16x16
diff --git a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/NodesTest.kt b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/NodesTest.kt
index d05af45..c4c78bd 100644
--- a/educational-core/testSrc/com/jetbrains/edu/learning/courseView/NodesTest.kt
+++ b/educational-core/testSrc/com/jetbrains/edu/learning/courseView/NodesTest.kt
@@ -156,9 +156,9 @@ class NodesTest: CourseViewTestBase() {
            taskFile3.txt
           taskFile1.txt
          -TaskNode task2
-          additionalFile1.txt
           -DirectoryNode folder
            additionalFile3.txt
+          additionalFile1.txt
     """.trimIndent())
   }

@@ -176,11 +176,11 @@ class NodesTest: CourseViewTestBase() {
           taskFile1.txt
           CCStudentInvisibleFileNode taskFile2.txt
          -CCTaskNode task2
-          additionalFile1.txt
-          CCStudentInvisibleFileNode additionalFile2.txt
           -CCNode folder
            additionalFile3.txt
            CCStudentInvisibleFileNode additionalFile4.txt
+          additionalFile1.txt
+          CCStudentInvisibleFileNode additionalFile2.txt
           CCStudentInvisibleFileNode task.html
     """.trimIndent())
   }
@@ -206,12 +206,12 @@ class NodesTest: CourseViewTestBase() {
           taskFile1.txt
           CCStudentInvisibleFileNode taskFile2.txt
          -CCTaskNode task2
-          additionalFile1.txt
-          CCStudentInvisibleFileNode additionalFile2.txt
           -CCNode folder
            additionalFile3.txt
            CCStudentInvisibleFileNode additionalFile4.txt
            CCStudentInvisibleFileNode non_course_file3.txt (excluded)
+          additionalFile1.txt
+          CCStudentInvisibleFileNode additionalFile2.txt
           CCStudentInvisibleFileNode task.html
         CCStudentInvisibleFileNode non_course_file1.txt
     """.trimIndent())
diff --git a/gradle.properties b/gradle.properties
index 6a37f6f..224fe4f 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-environmentName=183
+environmentName=181

 # needed for twitting functionality available currently only for kotlin koans
 consumerKey=
